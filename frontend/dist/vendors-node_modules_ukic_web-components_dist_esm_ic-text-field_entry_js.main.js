"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk"] = self["webpackChunk"] || []).push([["vendors-node_modules_ukic_web-components_dist_esm_ic-text-field_entry_js"],{

/***/ "../../../../../../../../node_modules/@ukic/web-components/dist/esm/ic-text-field.entry.js":
/*!*************************************************************************************************!*\
  !*** ../../../../../../../../node_modules/@ukic/web-components/dist/esm/ic-text-field.entry.js ***!
  \*************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("{__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ic_text_field: () => (/* binding */ TextField)\n/* harmony export */ });\n/* harmony import */ var _index_a7a720e7_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index-a7a720e7.js */ \"../../../../../../../../node_modules/@ukic/web-components/dist/esm/index-a7a720e7.js\");\n/* harmony import */ var _helpers_56631aa0_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./helpers-56631aa0.js */ \"../../../../../../../../node_modules/@ukic/web-components/dist/esm/helpers-56631aa0.js\");\n\n\n\nconst icTextFieldCss = \"/*! normalize.css v8.0.1 | MIT License | github.com/necolas/normalize.css */html{line-height:1.15;-webkit-text-size-adjust:100%;}body{margin:0}main{display:block}h1{font-size:2em;margin:0.67em 0}hr{box-sizing:content-box;height:0;overflow:visible;}pre{font-family:monospace, monospace;font-size:1em;}a{background-color:transparent}abbr[title]{border-bottom:none;text-decoration:underline;-webkit-text-decoration:underline dotted;text-decoration:underline dotted;}b,strong{font-weight:bolder}code,kbd,samp{font-family:monospace, monospace;font-size:1em;}small{font-size:80%}sub,sup{font-size:75%;line-height:0;position:relative;vertical-align:baseline}sub{bottom:-0.25em}sup{top:-0.5em}img{border-style:none}button,input,optgroup,select,textarea{font-family:inherit;font-size:100%;line-height:1.15;margin:0;}button,input{overflow:visible}button,select{text-transform:none}button,[type=\\\"button\\\"],[type=\\\"reset\\\"],[type=\\\"submit\\\"]{-webkit-appearance:button}button::-moz-focus-inner,[type=\\\"button\\\"]::-moz-focus-inner,[type=\\\"reset\\\"]::-moz-focus-inner,[type=\\\"submit\\\"]::-moz-focus-inner{border-style:none;padding:0}button:-moz-focusring,[type=\\\"button\\\"]:-moz-focusring,[type=\\\"reset\\\"]:-moz-focusring,[type=\\\"submit\\\"]:-moz-focusring{outline:1px dotted ButtonText}fieldset{padding:0.35em 0.75em 0.625em}legend{box-sizing:border-box;color:inherit;display:table;max-width:100%;padding:0;white-space:normal;}progress{vertical-align:baseline}textarea{overflow:auto}[type=\\\"checkbox\\\"],[type=\\\"radio\\\"]{box-sizing:border-box;padding:0;}[type=\\\"number\\\"]::-webkit-inner-spin-button,[type=\\\"number\\\"]::-webkit-outer-spin-button{height:auto}[type=\\\"search\\\"]{-webkit-appearance:textfield;outline-offset:-2px;}[type=\\\"search\\\"]::-webkit-search-decoration{-webkit-appearance:none}::-webkit-file-upload-button{-webkit-appearance:button;font:inherit;}details{display:block}summary{display:list-item}template{display:none}[hidden]{display:none}html,body,div,span,applet,object,iframe,h1,h2,h3,h4,h5,h6,p,blockquote,pre,a,abbr,acronym,address,big,cite,code,del,dfn,em,img,ins,kbd,q,s,samp,small,strike,strong,sub,sup,tt,var,b,u,i,center,dl,dt,dd,ol,ul,li,fieldset,form,label,legend,table,caption,tbody,tfoot,thead,tr,th,td,article,aside,canvas,details,embed,figure,figcaption,footer,header,hgroup,menu,nav,output,ruby,section,summary,time,mark,audio,video{margin:0;padding:0;border:0;font-size:100%;font-style:inherit;vertical-align:baseline}:host{display:block;--ic-input-label-helpertext-padding:var(--ic-space-xs);--border-color:var(--ic-text-field-border-neutral);--border-color-hover:var(--ic-text-field-border-neutral-hover);--border-color-pressed:var(--ic-text-field-border-neutral-pressed);--border-color-disabled:var(--ic-text-field-border-disabled);--border-color-error:var(--ic-text-field-border-error);--border-color-error-hover:var(--ic-text-field-border-error-hover);--border-color-error-pressed:var(--ic-text-field-border-error-pressed);--border-color-success:var(--ic-text-field-border-success);--border-color-success-hover:var(--ic-text-field-border-success-hover);--border-color-success-pressed:var(--ic-text-field-border-success-pressed);--border-color-warning:var(--ic-text-field-border-warning);--border-color-warning-hover:var(--ic-text-field-border-warning-hover);--border-color-warning-pressed:var(--ic-text-field-border-warning-pressed);--ic-input-label-text-color:var(--ic-text-field-label);--ic-input-label-helper-text-color:var(--ic-text-field-subtitle);--ic-input-validation-status-text-color:var(--ic-text-field-state-text);--ic-input-validation-error:var(--ic-text-field-state-icon-error);--ic-input-validation-warning-icon-color:var(\\n    --ic-text-field-state-icon-warning\\n  );--ic-input-validation-success-icon-color:var(\\n    --ic-text-field-state-icon-success\\n  );--ic-input-component-container-success-icon-inline-color:var(\\n    --ic-text-field-state-icon-success\\n  )}:host(.ic-text-field-disabled){--ic-input-label-text-color:var(--ic-text-field-label-disabled);--ic-input-label-helper-text-color:var(--ic-text-field-subtitle-disabled);--text-field-placeholder-color:var(\\n    --ic-text-field-text-area-placeholder-text-disabled\\n  )}:host(.ic-text-field-full-width){width:100%}::-moz-placeholder{color:var(\\n    --text-field-placeholder-color,\\n    var(--ic-text-field-placeholder-text)\\n  );opacity:1}::placeholder{color:var(\\n    --text-field-placeholder-color,\\n    var(--ic-text-field-placeholder-text)\\n  );opacity:1}input,textarea{border:0;border-radius:var(--ic-border-radius);color:var(--text-field-text-color, var(--ic-text-field-text));background-color:var(--input-bg-color, var(--ic-text-field-background));line-height:1.5rem;letter-spacing:0.005rem;width:100%;padding-right:var(--ic-space-xs);padding-left:var(--ic-space-xs);caret-color:var(\\n    --text-field-typing-cursor,\\n    var(--ic-text-field-typing-cursor)\\n  )}textarea{min-height:var(--ic-space-lg);resize:vertical;padding-top:0.375rem}input:focus,textarea:focus{border:0;outline:0}input:disabled,textarea:disabled{color:var(\\n    --text-field-disabled-text-color,\\n    var(--ic-text-field-text-disabled)\\n  )}input.readonly,textarea.readonly{color:var(--ic-text-field-read-only-input-text-internal);background:transparent}input::-webkit-outer-spin-button,input::-webkit-inner-spin-button{-webkit-appearance:none;margin:0}input[type=\\\"number\\\"]{-moz-appearance:textfield}textarea.no-resize{resize:none}.char-count-text{--ic-typography-color:var(--ic-text-field-character-limit);padding-right:var(--ic-space-xxxs)}:host(.ic-text-field-disabled) .char-count-text{--ic-typography-color:var(--ic-text-field-character-limit-disabled)}.no-left-pad{padding-left:0}::slotted([slot=\\\"icon\\\"]){fill:var(--ic-text-field-text-disabled)}.has-value ::slotted([slot=\\\"icon\\\"]){fill:var(--ic-text-field-input-internal-icon)}.char-count{margin-right:calc(-1 * var(--ic-space-xxxs))}.remaining-char-count-desc{position:absolute;left:-9999px}input[type=\\\"search\\\"]::-webkit-search-cancel-button,input[type=\\\"search\\\"]::-webkit-search-decoration,input[type=\\\"search\\\"]::-webkit-search-results-button,input[type=\\\"search\\\"]::-webkit-search-results-decoration{display:none}input[type=\\\"search\\\"].truncate-value{width:100%;overflow:hidden;white-space:nowrap;text-overflow:ellipsis}@media (forced-colors: active){input.readonly,textarea.readonly{color:canvastext}.has-value ::slotted([slot=\\\"icon\\\"]){fill:currentcolor}}\";\nconst IcTextFieldStyle0 = icTextFieldCss;\n\nlet inputIds = 0;\nconst MUTABLE_ATTRIBUTES = [..._helpers_56631aa0_js__WEBPACK_IMPORTED_MODULE_1__.z, \"title\"];\nconst TextField = class {\n    constructor(hostRef) {\n        (0,_index_a7a720e7_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);\n        this.getValidationText = (0,_index_a7a720e7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, \"getValidationText\", 7);\n        this.icBlur = (0,_index_a7a720e7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, \"icBlur\", 7);\n        this.icChange = (0,_index_a7a720e7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, \"icChange\", 7);\n        this.icFocus = (0,_index_a7a720e7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, \"icFocus\", 7);\n        this.icInput = (0,_index_a7a720e7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, \"icInput\", 7);\n        this.icKeydown = (0,_index_a7a720e7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, \"icKeydown\", 7);\n        this.icScroll = (0,_index_a7a720e7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, \"icScroll\", 7);\n        this.inheritedAttributes = {};\n        this.hostMutationObserver = null;\n        this.numChars = 0;\n        this.maxCharactersReached = false;\n        this.maxCharactersWarning = false;\n        this.minCharactersUnattained = false;\n        this.maxValueExceeded = false;\n        this.minValueUnattained = false;\n        this.isFocussed = false;\n        /**\n         * The automatic capitalisation of the text value as it is entered/edited by the user.\n         * Available options: \"off\", \"none\", \"on\", \"sentences\", \"words\", \"characters\".\n         */\n        this.autocapitalize = \"off\";\n        /**\n         * The state of autocompletion the browser can apply on the text value.\n         */\n        this.autocomplete = \"off\";\n        /**\n         * The state of autocorrection the browser can apply when the user is entering/editing the text value.\n         */\n        this.autocorrect = \"off\";\n        /**\n         * If `true`, the form control will have input focus when the page loads.\n         */\n        this.autofocus = false;\n        /**\n         * If `true`, the disabled state will be set.\n         */\n        this.disabled = false;\n        /**\n         * Specify whether the text field fills the full width of the container.\n         * If `true`, this overrides the --input-width CSS variable.\n         */\n        this.fullWidth = false;\n        /**\n         * The helper text that will be displayed for additional field guidance.\n         */\n        this.helperText = \"\";\n        /**\n         * If `true`, the character count which is displayed when `maxCharacters` is set will be visually hidden.\n         */\n        this.hideCharCount = false;\n        /**\n         * If `true`, the label will be hidden and the required label value will be applied as an aria-label.\n         */\n        this.hideLabel = false;\n        /**\n         * @internal If `true`, the hidden form input will stop rendering for form submission.\n         */\n        this.hiddenInput = true;\n        /**\n         * The ID for the input.\n         */\n        this.inputId = `ic-text-field-input-${inputIds++}`;\n        /**\n         * A hint to the browser for which keyboard to display.\n         * Possible values: `\"none\"`, `\"text\"`, `\"tel\"`, `\"url\"`,\n         * `\"email\"`, `\"numeric\"`, `\"decimal\"`, and `\"search\"`.\n         */\n        this.inputmode = \"text\";\n        /**\n         * The count of characters in the field. Will display a warning if the bound is reached. (NOTE: If the value of the text field has been set using the `value` prop, it will be truncated to this number of characters)\n         */\n        this.maxCharacters = 0;\n        /**\n         * The text to display as the warning message when the maximum number of characters (the `maxCharacters` prop value) is reached.\n         */\n        // prettier-ignore\n        this.maxCharactersMessage = `Maximum input is ${this.maxCharacters} characters`;\n        /**\n         * The text to display as the error message when the maximum value (the `max` prop value) has been exceeded.\n         */\n        this.maxMessage = `Maximum value of ${this.max} exceeded`;\n        /**\n         * The minimum number of characters that can be entered in the field.\n         */\n        this.minCharacters = 0;\n        /**\n         * The text to display as the error message when the minimum number of characters (the `minCharacters` prop value) has not been met.\n         */\n        // prettier-ignore\n        this.minCharactersMessage = `Minimum input is ${this.minCharacters} characters`;\n        /**\n         * The text to display as the error message when the minimum value (the `min` prop value) has not been met.\n         */\n        this.minMessage = `Minimum value of ${this.min} not met`;\n        /**\n         * The name of the control, which is submitted with the form data.\n         */\n        this.name = this.inputId;\n        /**\n         * The placeholder value to be displayed.\n         */\n        this.placeholder = \"\";\n        /**\n         * If `true`, the read only state will be set.\n         */\n        this.readonly = false;\n        /**\n         * If `true`, the input will require a value.\n         */\n        this.required = false;\n        /**\n         * If `true`, the multiline text area will be resizeable.\n         */\n        this.resize = false;\n        /**\n         * The number of rows to transform the text field into a text area with a specific height.\n         */\n        this.rows = 1;\n        /**\n         * The size of the text field component.\n         */\n        this.size = \"medium\";\n        /**\n         * If `true`, the value of the text field will have its spelling and grammar checked.\n         */\n        this.spellcheck = false;\n        /**\n         * Sets the theme color to the dark or light theme color. \"inherit\" will set the color based on the system settings or ic-theme component.\n         */\n        this.theme = \"inherit\";\n        /**\n         * @internal If `true`, an ellipsis will be displayed at the end of the value if the value is longer than the container.\n         */\n        this.truncateValue = false;\n        /**\n         * The type of control to display. The default type is text.\n         */\n        this.type = \"text\";\n        /**\n         * If `true`, the icon in input control will be displayed - only applies when validationStatus ='success'.\n         */\n        this.validationInline = false;\n        /**\n         *  @internal If `true`, the validation will display inline.\n         */\n        this.validationInlineInternal = false;\n        /**\n         * The validation state - e.g. 'error' | 'warning' | 'success'.\n         */\n        this.validationStatus = \"\";\n        /**\n         * The text to display as the validation message.\n         */\n        this.validationText = \"\";\n        /**\n         * The amount of time, in milliseconds, to wait to trigger the `icChange` event after each keystroke.\n         */\n        this.debounce = 0;\n        /**\n         * The value of the text field.\n         */\n        this.value = \"\";\n        this.initialValue = this.value;\n        this.checkChildHydration = () => {\n            var _a, _b;\n            if (this.hideLabel ||\n                ((_b = (_a = this.el.shadowRoot) === null || _a === void 0 ? void 0 : _a.querySelector(\"ic-typography\")) === null || _b === void 0 ? void 0 : _b.classList.contains(\"hydrated\"))) {\n                this.setFocus();\n                clearInterval(this.interval);\n            }\n        };\n        this.getNumberOfCharacters = (value) => value !== null && value !== undefined ? value.length : 0;\n        this.getMaxValueExceeded = (value) => {\n            this.numChars = this.getNumberOfCharacters(value);\n            if (this.type === \"number\") {\n                this.minValueUnattained = !!value && Number(value) < Number(this.min);\n                this.maxValueExceeded = Number(value) > Number(this.max);\n            }\n        };\n        this.getMaxCharactersReached = (value) => {\n            this.numChars = this.getNumberOfCharacters(value);\n            this.maxCharactersReached =\n                this.maxCharacters > 0 && this.numChars >= this.maxCharacters;\n            if (this.maxCharactersWarning && !this.maxCharactersReached) {\n                this.maxCharactersWarning = false;\n            }\n        };\n        this.onInput = (ev) => {\n            this.value = ev.target.value;\n            this.icInput.emit({ value: this.value });\n        };\n        this.onBlur = (ev) => {\n            const target = ev.target;\n            target.removeEventListener(\"wheel\", this.onWheel);\n            const { value } = target;\n            this.numChars = value.length;\n            this.minCharactersUnattained =\n                this.minCharacters > 0 && this.numChars < this.minCharacters;\n            this.icBlur.emit({ value });\n            this.isFocussed = false;\n        };\n        this.onFocus = (ev) => {\n            const target = ev.target;\n            target.addEventListener(\"wheel\", this.onWheel);\n            this.icFocus.emit({ value: target.value });\n            this.isFocussed = true;\n        };\n        this.onTextAreaScroll = () => {\n            this.icScroll.emit();\n        };\n        this.onWheel = (ev) => {\n            const target = ev.target;\n            if (target.type === \"number\") {\n                target.blur();\n                setTimeout(() => {\n                    target.focus();\n                }, 0);\n            }\n        };\n        this.hasStatus = (status) => status !== \"\" && !this.disabled;\n        this.handleFormReset = () => {\n            this.value = this.initialValue;\n        };\n        // triggered when attributes of host element change\n        this.hostMutationCallback = (mutationList) => {\n            let forceComponentUpdate = false;\n            mutationList.forEach(({ attributeName, type, addedNodes, removedNodes }) => {\n                if (attributeName && MUTABLE_ATTRIBUTES.includes(attributeName)) {\n                    const attribute = this.el.getAttribute(attributeName);\n                    if (attribute) {\n                        this.inheritedAttributes[attributeName] = attribute;\n                    }\n                    forceComponentUpdate = true;\n                }\n                else if (type === \"childList\") {\n                    forceComponentUpdate = (0,_helpers_56631aa0_js__WEBPACK_IMPORTED_MODULE_1__.H)(addedNodes, removedNodes, \"icon\");\n                }\n            });\n            if (forceComponentUpdate) {\n                (0,_index_a7a720e7_js__WEBPACK_IMPORTED_MODULE_0__.f)(this);\n            }\n        };\n    }\n    watchDisabledHandler() {\n        (0,_helpers_56631aa0_js__WEBPACK_IMPORTED_MODULE_1__.r)(this.disabled, this.el);\n    }\n    debounceChanged() {\n        this.icChange = (0,_helpers_56631aa0_js__WEBPACK_IMPORTED_MODULE_1__.G)(this.icChange, this.debounce);\n    }\n    watchValueHandler(newValue) {\n        let value;\n        if (this.maxCharacters > 0) {\n            value = newValue.substring(0, this.maxCharacters);\n            if (value.length < newValue.length) {\n                this.maxCharactersWarning = true;\n            }\n            this.value = value;\n        }\n        else {\n            value = newValue;\n        }\n        if (this.inputEl && this.inputEl.value !== value) {\n            this.inputEl.value = value;\n        }\n        this.getMaxValueExceeded(value);\n        this.getMaxCharactersReached(value);\n        this.icChange.emit({ value });\n    }\n    connectedCallback() {\n        this.debounceChanged();\n    }\n    disconnectedCallback() {\n        var _a;\n        (0,_helpers_56631aa0_js__WEBPACK_IMPORTED_MODULE_1__.l)(this.el, this.handleFormReset);\n        (_a = this.hostMutationObserver) === null || _a === void 0 ? void 0 : _a.disconnect();\n    }\n    componentWillLoad() {\n        if (this.value !== this.initialValue) {\n            this.watchValueHandler(this.value);\n        }\n        else if (this.maxCharacters > 0) {\n            this.value = this.value.substring(0, this.maxCharacters);\n        }\n        this.getMaxValueExceeded(this.value);\n        this.getMaxCharactersReached(this.value);\n        this.inheritedAttributes = (0,_helpers_56631aa0_js__WEBPACK_IMPORTED_MODULE_1__.x)(this.el, MUTABLE_ATTRIBUTES);\n        if (this.readonly) {\n            this.maxValueExceeded = false;\n            this.minValueUnattained = false;\n        }\n        (0,_helpers_56631aa0_js__WEBPACK_IMPORTED_MODULE_1__.k)(this.el, this.handleFormReset);\n        (0,_helpers_56631aa0_js__WEBPACK_IMPORTED_MODULE_1__.r)(this.disabled, this.el);\n    }\n    componentDidLoad() {\n        (0,_helpers_56631aa0_js__WEBPACK_IMPORTED_MODULE_1__.o)([{ prop: this.label, propName: \"label\" }], \"Text Field\");\n        if (this.validationInlineInternal) {\n            this.getValidationText.emit({ value: this.validationText });\n        }\n        this.hostMutationObserver = new MutationObserver(this.hostMutationCallback);\n        this.hostMutationObserver.observe(this.el, {\n            attributes: true,\n            childList: true,\n        });\n        if (this.autofocus && !this.disabled && !this.readonly) {\n            this.interval = setInterval(this.checkChildHydration, 50);\n        }\n    }\n    handleKeyDown(ev) {\n        this.icKeydown.emit({ event: ev });\n        if (!ev.ctrlKey && !_helpers_56631aa0_js__WEBPACK_IMPORTED_MODULE_1__.N.includes(ev.key)) {\n            this.maxCharactersWarning = this.maxCharactersReached;\n        }\n    }\n    /**\n     * Sets focus on the native `input`.\n     */\n    async setFocus() {\n        var _a;\n        (_a = this.inputEl) === null || _a === void 0 ? void 0 : _a.focus();\n    }\n    render() {\n        const { inputId, name, label, required, size, placeholder, helperText, hideCharCount, rows, resize, disabled, value, min, max, numChars, readonly, maxCharacters, maxCharactersMessage, maxCharactersWarning, maxCharactersReached, maxMessage, minCharacters, minCharactersMessage, minCharactersUnattained, minMessage, minValueUnattained, maxValueExceeded, validationStatus, validationText, validationInline, validationInlineInternal, spellcheck, inputmode, fullWidth, truncateValue, hiddenInput, theme, hideLabel, type, autocapitalize, ariaActiveDescendant, inheritedAttributes, ariaExpanded, ariaOwns, autocomplete, role, isFocussed, } = this;\n        const el = this.el;\n        const disabledMode = readonly || disabled;\n        const currentStatus = maxValueExceeded ||\n            minValueUnattained ||\n            minCharactersUnattained ||\n            maxCharactersWarning\n            ? maxCharactersWarning\n                ? _helpers_56631aa0_js__WEBPACK_IMPORTED_MODULE_1__.L.Warning\n                : _helpers_56631aa0_js__WEBPACK_IMPORTED_MODULE_1__.L.Error\n            : validationStatus;\n        const currentValidationText = maxCharactersWarning\n            ? maxCharactersMessage\n            : maxValueExceeded\n                ? maxMessage\n                : minValueUnattained\n                    ? minMessage\n                    : minCharactersUnattained\n                        ? minCharactersMessage\n                        : validationText;\n        const maxNumChars = readonly ? 0 : maxCharacters;\n        const messageAriaLive = maxCharactersWarning ||\n            maxValueExceeded ||\n            minValueUnattained ||\n            currentStatus === _helpers_56631aa0_js__WEBPACK_IMPORTED_MODULE_1__.L.Error\n            ? \"assertive\"\n            : \"polite\";\n        const showStatusText = this.hasStatus(currentStatus) &&\n            !(currentStatus == _helpers_56631aa0_js__WEBPACK_IMPORTED_MODULE_1__.L.Success && validationInline) &&\n            !validationInlineInternal;\n        const multiline = rows > 1;\n        const hiddenCharCountDescId = maxCharacters > 0 ? `${inputId}-char-count-desc` : \"\";\n        const charsRemaining = maxNumChars - numChars;\n        const remainingCharCountDescId = maxCharacters > 0 ? `${inputId}-remaining-char-count-desc` : \"\";\n        const remainingCharCountDesc = `${charsRemaining} character${charsRemaining === 1 ? \"\" : \"s\"} remaining.`;\n        const describedBy = `${hiddenCharCountDescId} ${numChars > 0 ? remainingCharCountDescId : \"\"} ${(0,_helpers_56631aa0_js__WEBPACK_IMPORTED_MODULE_1__.q)(this.el, inputId, helperText !== \"\", showStatusText)}`.trim();\n        const disabledText = disabledMode && !readonly;\n        const showLeftIcon = !!this.el.querySelector(`[slot=\"icon\"]`) && !disabledText;\n        const invalid = `${currentStatus === _helpers_56631aa0_js__WEBPACK_IMPORTED_MODULE_1__.L.Error}`;\n        hiddenInput\n            ? (0,_helpers_56631aa0_js__WEBPACK_IMPORTED_MODULE_1__.m)(this.el, value, name, disabledMode)\n            : (0,_helpers_56631aa0_js__WEBPACK_IMPORTED_MODULE_1__.n)(this.el);\n        return ((0,_index_a7a720e7_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_a7a720e7_js__WEBPACK_IMPORTED_MODULE_0__.H, { key: 'af9f4dab9e78765b8e1e578d57783e5487d83f6b', class: {\n                \"ic-text-field-full-width\": fullWidth,\n                \"ic-text-field-disabled\": disabledMode,\n                [`ic-theme-${theme}`]: theme !== \"inherit\",\n            } }, (0,_index_a7a720e7_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"ic-input-container\", { key: '7417dcc2f53f877899b713093e81a4db38c394c7', readonly: readonly, disabled: disabledMode }, !hideLabel && ((0,_index_a7a720e7_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"ic-input-label\", { key: '36ae0e2a6a99024c0b8fbd141519dcd4d5390e6d', for: inputId, label: label, helperText: helperText, required: required, disabled: disabledText, readonly: readonly }, (0,_index_a7a720e7_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"slot\", { key: '9392299204d1bc2ef1b0bb464984b8f8bc148834', name: \"helper-text\", slot: \"helper-text\" }))), (0,_index_a7a720e7_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"ic-input-component-container\", { key: 'd6819ae02cab210950e11d74c1dac6dd3c5505ed', size: size, validationStatus: currentStatus, multiLine: multiline, disabled: disabledMode, readonly: readonly, validationInline: validationInline, fullWidth: fullWidth }, showLeftIcon && ((0,_index_a7a720e7_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"span\", { key: '660f12ab2717dfd7b75bd19a60c92c167fb06db3', class: {\n                readonly,\n                \"has-value\": this.getNumberOfCharacters(value) > 0,\n            }, slot: \"left-icon\" }, (0,_index_a7a720e7_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"slot\", { key: '8631fc623d4f5b422921add6d01992b736acdf22', name: \"icon\" }))), !multiline ? ((0,_index_a7a720e7_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"input\", Object.assign({ id: inputId, name: name, ref: (el) => (this.inputEl = el), type: type, min: min, max: max, value: value, class: {\n                \"no-left-pad\": !showLeftIcon && readonly,\n                readonly,\n                \"truncate-value\": truncateValue,\n            }, placeholder: placeholder ? placeholder : \"\", required: required, disabled: disabledMode, readonly: readonly, onInput: this.onInput, onBlur: this.onBlur, onFocus: this.onFocus, \"aria-label\": label, \"aria-describedby\": describedBy, \"aria-invalid\": invalid, \"aria-activedescendant\": ariaActiveDescendant, \"aria-expanded\": ariaExpanded, \"aria-owns\": ariaOwns, autocomplete: autocomplete, autocapitalize: autocapitalize, spellcheck: spellcheck, inputmode: inputmode, role: role || undefined, maxlength: maxCharactersReached ? maxCharacters : undefined, minlength: minCharactersUnattained ? minCharacters : undefined }, inheritedAttributes))) : ((0,_index_a7a720e7_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"textarea\", Object.assign({ id: inputId, class: {\n                \"no-resize\": resize === false || !!readonly,\n                \"no-left-pad\": !showLeftIcon && !!readonly,\n                readonly: !!readonly,\n            }, name: name, ref: (el) => (this.inputEl = el), value: value, rows: rows, required: required, disabled: disabledMode, placeholder: placeholder, readonly: readonly, onInput: this.onInput, onBlur: this.onBlur, onFocus: this.onFocus, onScroll: this.onTextAreaScroll, \"aria-label\": label, \"aria-describedby\": describedBy, \"aria-invalid\": invalid, autocapitalize: autocapitalize, spellcheck: spellcheck, inputmode: inputmode, maxlength: maxCharactersReached ? maxCharacters : undefined, minlength: minCharactersUnattained ? minCharacters : undefined }, inheritedAttributes))), (0,_helpers_56631aa0_js__WEBPACK_IMPORTED_MODULE_1__.i)(el, \"clear-button\") && ((0,_index_a7a720e7_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"slot\", { key: 'c92ce219c83dccaec610f5caeb2a71b4753cbe2f', name: \"clear-button\" })), (0,_helpers_56631aa0_js__WEBPACK_IMPORTED_MODULE_1__.i)(el, \"search-submit-button\") && ((0,_index_a7a720e7_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"slot\", { key: '4ee50a7855e3a2c3fb5ab4ad655b278bb7a2190d', name: \"search-submit-button\" }))), (0,_helpers_56631aa0_js__WEBPACK_IMPORTED_MODULE_1__.i)(el, \"menu\") && (0,_index_a7a720e7_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"slot\", { key: '9ab8449f815482c7cd689d3d22b918de4c72c27b', name: \"menu\" }), (!(0,_helpers_56631aa0_js__WEBPACK_IMPORTED_MODULE_1__.M)(validationStatus) ||\n            !(0,_helpers_56631aa0_js__WEBPACK_IMPORTED_MODULE_1__.M)(validationText) ||\n            maxNumChars > 0 ||\n            maxValueExceeded ||\n            maxCharactersWarning ||\n            minCharactersUnattained ||\n            minValueUnattained) &&\n            !validationInlineInternal && ((0,_index_a7a720e7_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"ic-input-validation\", { key: 'b87afc1859b8a33d5767b5b0c61056936b760de7', status: this.hasStatus(currentStatus) === false ||\n                (currentStatus === _helpers_56631aa0_js__WEBPACK_IMPORTED_MODULE_1__.L.Success &&\n                    validationInline) ||\n                validationInlineInternal\n                ? \"\"\n                : currentStatus, message: showStatusText ? currentValidationText : \"\", ariaLiveMode: messageAriaLive, for: inputId, fullWidth: fullWidth }, !readonly && maxNumChars > 0 && ((0,_index_a7a720e7_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"div\", { key: 'b0f41b53066d1c7b6fa4442796ec5122198575bf', slot: \"validation-message-adornment\" }, !hideCharCount && ((0,_index_a7a720e7_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"ic-typography\", { key: 'acc961a28e30293d1031a8469327e3f70c179936', variant: \"caption\", class: \"char-count-text\" }, (0,_index_a7a720e7_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"span\", { key: '94e2d9e62a04beccd7abc4309a70f6a0908f4d34', class: \"char-count\" }, numChars, \"/\", maxNumChars))), (0,_index_a7a720e7_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"span\", { key: 'caf33b69417c2a5d956b7a88ea3855212c7e3e19', class: \"remaining-char-count-desc\", \"aria-live\": \"polite\", hidden: !isFocussed, id: remainingCharCountDescId }, remainingCharCountDesc), (0,_index_a7a720e7_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"span\", { key: 'f69c682178137ae9da47c05c15b81de48e06189a', hidden: true, id: hiddenCharCountDescId }, \"Field can contain a maximum of \", maxNumChars, \" characters.\"))))))));\n    }\n    get el() { return (0,_index_a7a720e7_js__WEBPACK_IMPORTED_MODULE_0__.g)(this); }\n    static get watchers() { return {\n        \"disabled\": [\"watchDisabledHandler\"],\n        \"debounce\": [\"debounceChanged\"],\n        \"value\": [\"watchValueHandler\"]\n    }; }\n};\nTextField.style = IcTextFieldStyle0;\n\n\n\n//# sourceMappingURL=ic-text-field.entry.js.map\n\n//# sourceURL=webpack:///../../../../../../../../node_modules/@ukic/web-components/dist/esm/ic-text-field.entry.js?\n}");

/***/ })

}]);