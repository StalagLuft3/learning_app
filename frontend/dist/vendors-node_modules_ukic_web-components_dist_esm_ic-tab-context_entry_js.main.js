"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk"] = self["webpackChunk"] || []).push([["vendors-node_modules_ukic_web-components_dist_esm_ic-tab-context_entry_js"],{

/***/ "../../../../../../../../node_modules/@ukic/web-components/dist/esm/ic-tab-context.entry.js":
/*!**************************************************************************************************!*\
  !*** ../../../../../../../../node_modules/@ukic/web-components/dist/esm/ic-tab-context.entry.js ***!
  \**************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("{__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ic_tab_context: () => (/* binding */ TabContext)\n/* harmony export */ });\n/* harmony import */ var _index_a7a720e7_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index-a7a720e7.js */ \"../../../../../../../../node_modules/@ukic/web-components/dist/esm/index-a7a720e7.js\");\n\n\nconst CONTEXT_ID_ATTR = \"context-id\";\nconst TabContext = class {\n    constructor(hostRef) {\n        (0,_index_a7a720e7_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);\n        this.icTabSelect = (0,_index_a7a720e7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, \"icTabSelect\", 3);\n        this.newTabPanels = [];\n        this.newTabs = [];\n        /**\n         * Determines whether tabs have to be manually activated (by pressing 'Enter' or 'Space') when they receive focus using keyboard navigation.\n         */\n        this.activationType = \"automatic\";\n        /**\n         * The unique context needed if using multiple tabs inside one another i.e. rendering another set of tabs inside a tab panel.\n         */\n        this.contextId = \"default\";\n        /**\n         * If `true`, the tabs will display as black in the light theme.\n         */\n        this.monochrome = false;\n        /**\n         * Sets the theme color to the dark or light theme color. \"inherit\" will set the color based on the system settings or ic-theme component.\n         */\n        this.theme = \"inherit\";\n        /** Sets attributes to link tab-group, tabs and tab-panels */\n        this.linkTabs = () => {\n            this.tabs.forEach((tab, index) => {\n                const tabId = `ic-tab-${index}-context-${this.contextId}`;\n                const tabPanelId = `ic-tab-panel-${index}-context-${this.contextId}`;\n                tab.setAttribute(\"id\", tabId);\n                tab.tabId = `ic-tab--${index}-context-${this.contextId}`;\n                tab.tabPosition = index;\n                tab.setAttribute(\"aria-controls\", tabPanelId);\n                this.tabPanels[index].setAttribute(\"id\", tabPanelId);\n                this.tabPanels[index].setAttribute(\"aria-labelledby\", tabId);\n                if (this.contextId) {\n                    tab.setAttribute(CONTEXT_ID_ATTR, this.contextId);\n                    this.tabGroup &&\n                        this.tabGroup.setAttribute(CONTEXT_ID_ATTR, this.contextId);\n                    this.tabPanels[index].setAttribute(CONTEXT_ID_ATTR, this.contextId);\n                }\n                tab.theme = this.theme;\n                this.tabPanels[index].theme = this.theme;\n                this.tabGroup && (this.tabGroup.theme = this.theme);\n            });\n        };\n        /**\n         * Gets tabs and tabpanels with the same context ID using querySelector to selector the children in relation to the host\n         */\n        this.getChildren = () => {\n            var _a;\n            this.tabGroup = this.el.querySelector(\"ic-tab-group\");\n            this.tabs = Array.from(((_a = this.tabGroup) === null || _a === void 0 ? void 0 : _a.querySelectorAll(\"ic-tab\")) || []);\n            this.tabPanels = Array.from(this.el.children).filter((child) => child.tagName === \"IC-TAB-PANEL\");\n            this.enabledTabs = this.getEnabledTabs();\n        };\n        this.keydownHandler = (event) => {\n            const isManual = this.activationType === \"manual\";\n            const enabledTabIndex = this.enabledTabs.findIndex((tab) => tab.tabId ===\n                this.tabs[isManual ? this.focusedTabIndex : this.selectedTab || 0].tabId);\n            const keyboardFunction = isManual\n                ? this.keyboardFocusTab\n                : this.keyboardSelectTab;\n            let preventDefault = true;\n            switch (event.key) {\n                case \"Home\":\n                    keyboardFunction(0);\n                    break;\n                case \"End\":\n                    keyboardFunction(this.enabledTabs.length - 1);\n                    break;\n                case \"ArrowRight\":\n                    keyboardFunction(enabledTabIndex < this.enabledTabs.length - 1\n                        ? enabledTabIndex + 1\n                        : 0);\n                    break;\n                case \"ArrowLeft\":\n                    keyboardFunction((enabledTabIndex > 0 ? enabledTabIndex : this.enabledTabs.length) - 1);\n                    break;\n                default:\n                    if (isManual && (event.key === \"Enter\" || event.key === \" \")) {\n                        this.keyboardSelectTab(this.focusedTabIndex);\n                    }\n                    else {\n                        preventDefault = false;\n                    }\n            }\n            if (preventDefault)\n                event.preventDefault();\n        };\n        /** Sets the tab that is selected on initial render */\n        this.setInitialTab = () => {\n            if (this.selectedTabIndex !== undefined) {\n                this.selectedTab = this.selectedTabIndex;\n                this.focusedTabIndex = this.selectedTabIndex;\n            }\n            else {\n                const firstEnabledTabIndex = this.tabs.findIndex((tab) => tab.tabId === this.enabledTabs[0].tabId);\n                this.selectedTab = firstEnabledTabIndex;\n                this.focusedTabIndex = firstEnabledTabIndex;\n            }\n        };\n        /** Passes the selected tab to the tab and tab panel components */\n        this.configureTabs = () => {\n            this.enabledTabs.forEach((tab) => {\n                tab.selected = tab.tabPosition === this.selectedTab;\n            });\n            this.tabPanels.forEach((tabPanel, index) => {\n                tabPanel.active = index === this.selectedTab;\n            });\n        };\n        this.getEnabledTabs = () => Array.from(this.tabs).filter((child) => !child.disabled);\n        /** Sets focus on tab and selects it */\n        this.keyboardSelectTab = (enabledTabIndex) => {\n            var _a, _b;\n            const newIndex = this.tabs.findIndex((tab) => tab.tabId === this.enabledTabs[enabledTabIndex].tabId);\n            this.enabledTabs[enabledTabIndex].focus();\n            if (this.selectedTabIndex === undefined) {\n                this.selectedTab = newIndex;\n            }\n            else {\n                /* eslint-disable no-unexpected-multiline */\n                this.icTabSelect.emit({\n                    tabIndex: newIndex,\n                    tabLabel: ((_b = (_a = this.el.querySelectorAll(\"ic-tab\")[newIndex]) === null || _a === void 0 ? void 0 : _a.textContent) === null || _b === void 0 ? void 0 : _b.trim()) ||\n                        \"\",\n                });\n            }\n        };\n        /** Sets focus on tab without selecting it (for manual activation) */\n        this.keyboardFocusTab = (enabledTabIndex) => {\n            this.enabledTabs[enabledTabIndex].focus();\n            this.focusedTabIndex = this.tabs.findIndex((tab) => tab.tabId === this.enabledTabs[enabledTabIndex].tabId);\n        };\n    }\n    updateSelectedTab(newValue) {\n        this.selectedTab = newValue;\n    }\n    watchMonochromeHandler() {\n        this.tabs.forEach((tab, index) => {\n            tab.monochrome = this.monochrome;\n            this.tabPanels[index].monochrome = this.monochrome;\n        });\n        this.tabGroup && (this.tabGroup.monochrome = this.monochrome);\n    }\n    watchThemeHandler() {\n        this.tabs.forEach((tab, index) => {\n            tab.theme = this.theme;\n            this.tabPanels[index].theme = this.theme;\n        });\n        this.tabGroup && (this.tabGroup.theme = this.theme);\n    }\n    componentDidLoad() {\n        if (this.selectedTabIndex !== undefined) {\n            this.selectedTab = this.selectedTabIndex;\n        }\n        this.getChildren();\n        this.linkTabs();\n        this.tabGroup &&\n            this.tabGroup.addEventListener(\"keydown\", this.keydownHandler);\n        this.setInitialTab();\n        this.configureTabs();\n    }\n    componentWillUpdate() {\n        this.configureTabs();\n    }\n    disconnectedCallback() {\n        var _a;\n        (_a = this.tabGroup) === null || _a === void 0 ? void 0 : _a.removeEventListener(\"keydown\", this.keydownHandler);\n    }\n    tabClickHandler(event) {\n        var _a, _b;\n        if (this.selectedTabIndex === undefined &&\n            event.detail.contextId === this.contextId) {\n            this.selectedTab = event.detail.position;\n        }\n        /* eslint-disable no-unexpected-multiline */\n        this.icTabSelect.emit({\n            tabIndex: event.detail.position,\n            tabLabel: ((_b = (_a = this.el\n                .querySelectorAll(\"ic-tab\")[event.detail.position]) === null || _a === void 0 ? void 0 : _a.textContent) === null || _b === void 0 ? void 0 : _b.trim()) || \"\",\n        });\n        /* eslint-enable no-unexpected-multiline */\n        event.stopImmediatePropagation();\n    }\n    tabCreatedHandler(ev) {\n        if (this.tabs && this.tabPanels) {\n            (ev.detail.setFocus ? this.newTabs : this.newTabPanels).push(ev.detail);\n            if (this.newTabs.length === this.newTabPanels.length) {\n                this.tabs.push(...this.newTabs);\n                this.tabPanels.push(...this.newTabPanels);\n                this.enabledTabs = this.getEnabledTabs();\n                this.linkTabs();\n                if (this.selectedTab &&\n                    (!this.tabs[this.selectedTab] || !this.tabPanels[this.selectedTab]))\n                    this.setInitialTab();\n                this.configureTabs();\n                this.newTabs = [];\n                this.newTabPanels = [];\n            }\n        }\n    }\n    tabEnabledHandler() {\n        this.enabledTabs = this.getEnabledTabs();\n    }\n    /**\n     * @internal Used to set tab/tab panel IDs when a tab/tab panel has been removed\n     */\n    async tabRemovedHandler(hadFocus) {\n        this.getChildren();\n        this.linkTabs();\n        if (this.selectedTab &&\n            this.tabs[this.selectedTab] &&\n            this.tabPanels[this.selectedTab]) {\n            this.tabs[this.selectedTab].selected = true;\n        }\n        else {\n            this.setInitialTab();\n        }\n        if (hadFocus && this.selectedTab) {\n            this.tabs[this.selectedTab].setFocus();\n        }\n    }\n    render() {\n        return (0,_index_a7a720e7_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"slot\", { key: 'a0fd989c3705d70d9bc2d1746dcce7f3df79c0d0' });\n    }\n    get el() { return (0,_index_a7a720e7_js__WEBPACK_IMPORTED_MODULE_0__.g)(this); }\n    static get watchers() { return {\n        \"selectedTabIndex\": [\"updateSelectedTab\"],\n        \"monochrome\": [\"watchMonochromeHandler\"],\n        \"theme\": [\"watchThemeHandler\"]\n    }; }\n};\n\n\n\n//# sourceMappingURL=ic-tab-context.entry.js.map\n\n//# sourceURL=webpack:///../../../../../../../../node_modules/@ukic/web-components/dist/esm/ic-tab-context.entry.js?\n}");

/***/ })

}]);