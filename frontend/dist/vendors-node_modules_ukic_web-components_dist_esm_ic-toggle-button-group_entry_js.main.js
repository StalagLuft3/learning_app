"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk"] = self["webpackChunk"] || []).push([["vendors-node_modules_ukic_web-components_dist_esm_ic-toggle-button-group_entry_js"],{

/***/ "../../../../../../../../node_modules/@ukic/web-components/dist/esm/ic-toggle-button-group.entry.js":
/*!**********************************************************************************************************!*\
  !*** ../../../../../../../../node_modules/@ukic/web-components/dist/esm/ic-toggle-button-group.entry.js ***!
  \**********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("{__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ic_toggle_button_group: () => (/* binding */ ToggleButtonGroup)\n/* harmony export */ });\n/* harmony import */ var _index_a7a720e7_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index-a7a720e7.js */ \"../../../../../../../../node_modules/@ukic/web-components/dist/esm/index-a7a720e7.js\");\n/* harmony import */ var _helpers_56631aa0_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./helpers-56631aa0.js */ \"../../../../../../../../node_modules/@ukic/web-components/dist/esm/helpers-56631aa0.js\");\n\n\n\nconst icToggleButtonGroupCss = \"/*! normalize.css v8.0.1 | MIT License | github.com/necolas/normalize.css */html{line-height:1.15;-webkit-text-size-adjust:100%;}body{margin:0}main{display:block}h1{font-size:2em;margin:0.67em 0}hr{box-sizing:content-box;height:0;overflow:visible;}pre{font-family:monospace, monospace;font-size:1em;}a{background-color:transparent}abbr[title]{border-bottom:none;text-decoration:underline;-webkit-text-decoration:underline dotted;text-decoration:underline dotted;}b,strong{font-weight:bolder}code,kbd,samp{font-family:monospace, monospace;font-size:1em;}small{font-size:80%}sub,sup{font-size:75%;line-height:0;position:relative;vertical-align:baseline}sub{bottom:-0.25em}sup{top:-0.5em}img{border-style:none}button,input,optgroup,select,textarea{font-family:inherit;font-size:100%;line-height:1.15;margin:0;}button,input{overflow:visible}button,select{text-transform:none}button,[type=\\\"button\\\"],[type=\\\"reset\\\"],[type=\\\"submit\\\"]{-webkit-appearance:button}button::-moz-focus-inner,[type=\\\"button\\\"]::-moz-focus-inner,[type=\\\"reset\\\"]::-moz-focus-inner,[type=\\\"submit\\\"]::-moz-focus-inner{border-style:none;padding:0}button:-moz-focusring,[type=\\\"button\\\"]:-moz-focusring,[type=\\\"reset\\\"]:-moz-focusring,[type=\\\"submit\\\"]:-moz-focusring{outline:1px dotted ButtonText}fieldset{padding:0.35em 0.75em 0.625em}legend{box-sizing:border-box;color:inherit;display:table;max-width:100%;padding:0;white-space:normal;}progress{vertical-align:baseline}textarea{overflow:auto}[type=\\\"checkbox\\\"],[type=\\\"radio\\\"]{box-sizing:border-box;padding:0;}[type=\\\"number\\\"]::-webkit-inner-spin-button,[type=\\\"number\\\"]::-webkit-outer-spin-button{height:auto}[type=\\\"search\\\"]{-webkit-appearance:textfield;outline-offset:-2px;}[type=\\\"search\\\"]::-webkit-search-decoration{-webkit-appearance:none}::-webkit-file-upload-button{-webkit-appearance:button;font:inherit;}details{display:block}summary{display:list-item}template{display:none}[hidden]{display:none}html,body,div,span,applet,object,iframe,h1,h2,h3,h4,h5,h6,p,blockquote,pre,a,abbr,acronym,address,big,cite,code,del,dfn,em,img,ins,kbd,q,s,samp,small,strike,strong,sub,sup,tt,var,b,u,i,center,dl,dt,dd,ol,ul,li,fieldset,form,label,legend,table,caption,tbody,tfoot,thead,tr,th,td,article,aside,canvas,details,embed,figure,figcaption,footer,header,hgroup,menu,nav,output,ruby,section,summary,time,mark,audio,video{margin:0;padding:0;border:0;font-size:100%;font-style:inherit;vertical-align:baseline}:root{display:block}:host{display:flex;flex-direction:row;width:-moz-fit-content;width:fit-content;min-width:-moz-min-content;min-width:min-content;border:var(--ic-border-width) solid var(--ic-toggle-button-unselected-border);border-radius:var(--ic-border-radius)}:host(.ic-toggle-button-group-full-width){width:100%;max-width:100%}:host(.ic-toggle-button-group-loading){min-width:-moz-max-content;min-width:max-content}:host(:focus){box-shadow:var(--ic-border-focus);border-radius:var(--ic-border-radius);transition:var(--ic-transition-duration-fast);outline:none}::slotted(ic-toggle-button){flex-grow:1;width:-moz-min-content;width:min-content;--toggle-button-border:none !important;--toggle-button-border-hover:none !important;--toggle-button-border-active:none !important}::slotted(ic-toggle-button:not(:last-of-type)){border-right:var(--ic-border-width) solid\\n    var(--ic-toggle-button-unselected-border)}:host(.ic-toggle-button-group-disabled){border:var(--ic-space-1px) dashed\\n    var(--ic-toggle-button-unselected-border-disabled);pointer-events:none}:host(.ic-toggle-button-group-disabled) ::slotted(ic-toggle-button:not(:last-of-type)){border-right:var(--ic-space-1px) dashed\\n    var(--ic-toggle-button-unselected-border-disabled)}:host(.ic-toggle-button-group-monochrome){border:var(--ic-border-width) solid\\n    var(--ic-toggle-button-unselected-border-monochrome)}:host(.ic-toggle-button-group-monochrome) ::slotted(ic-toggle-button:not(:last-of-type)){border-right:var(--ic-border-width) solid\\n    var(--ic-toggle-button-unselected-border-monochrome)}:host(.ic-toggle-button-group-disabled.ic-toggle-button-group-monochrome){border:var(--ic-border-width) dashed\\n    var(--ic-toggle-button-unselected-border-disabled-monochrome)}:host(.ic-toggle-button-group-disabled.ic-toggle-button-group-monochrome) ::slotted(ic-toggle-button:not(:last-of-type)){border-right:var(--ic-border-width) solid\\n    var(--ic-toggle-button-unselected-border-disabled-monochrome)}:host(.ic-toggle-button-group-hide-outline){--ic-toggle-button-unselected-border:transparent;--ic-toggle-button-unselected-border-disabled:transparent;--ic-toggle-button-unselected-border-monochrome:transparent;--ic-toggle-button-unselected-border-disabled-monochrome:transparent}\";\nconst IcToggleButtonGroupStyle0 = icToggleButtonGroupCss;\n\nconst TOGGLE_GROUP = \"IC-TOGGLE-BUTTON-GROUP\";\nconst ToggleButtonGroup = class {\n    constructor(hostRef) {\n        (0,_index_a7a720e7_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);\n        this.icChange = (0,_index_a7a720e7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, \"icChange\", 7);\n        this.lastKeyPressed = {\n            key: null,\n            shift: false,\n        };\n        /**\n         * The accessible label of the toggle button group component to provide context for screen reader users.\n         */\n        this.accessibleLabel = \"Toggle button group\";\n        /**\n         * If `true`, the toggle button group will be set to the disabled state.\n         */\n        this.disabled = false;\n        /**\n         * If `true`, the toggle button group will fill the width of the container.\n         */\n        this.fullWidth = false;\n        /**\n         * If `true`, the toggle button group will be in loading state.\n         */\n        this.loading = false;\n        /**\n         * If `true`, the toggle button group will display as black in the light theme, and white in dark theme.\n         */\n        this.monochrome = false;\n        /**\n         * If `true`, the toggle button group will display with an outline.\n         */\n        this.outline = true;\n        /**\n         * If `auto`, controls are toggled automatically when navigated to. If `manual`, the controls must be actioned to change their toggled state. The value of this prop is ignored if `selectType` is set to`multi`.\n         */\n        this.selectMethod = \"manual\";\n        /**\n         * Sets whether single or multiple options can be toggled. If `multi`, then the `selectMethod` is always `manual`.\n         */\n        this.selectType = \"single\";\n        /**\n         * The size of the toggle buttons to be displayed. This does not affect the font size of the accessible label.\n         */\n        this.size = \"medium\";\n        /**\n         * Sets the theme color to the dark or light theme color. \"inherit\" will set the color based on the system settings or ic-theme component.\n         */\n        this.theme = \"inherit\";\n        /**\n         * The position of the tooltip in relation to the toggle buttons.\n         */\n        this.tooltipPlacement = \"bottom\";\n        /**\n         * The variant of the toggle button.\n         */\n        this.variant = \"default\";\n        this.keyListener = (ev) => {\n            this.lastKeyPressed = {\n                key: ev.key,\n                shift: ev.shiftKey,\n            };\n        };\n        this.handleHostFocus = ({ target, relatedTarget }) => {\n            var _a;\n            if (this.loading || this.disabled)\n                return;\n            const el = target;\n            const relEl = relatedTarget;\n            const toggleButtons = Array.from((el === null || el === void 0 ? void 0 : el.querySelectorAll(\"ic-toggle-button\")) || []);\n            const noToggleButtonsChecked = toggleButtons.every((el) => !el.checked);\n            const { shift } = this.lastKeyPressed;\n            if (((noToggleButtonsChecked || this.selectType !== \"single\") && !shift) ||\n                (noToggleButtonsChecked && shift && (relEl === null || relEl === void 0 ? void 0 : relEl.tagName) == TOGGLE_GROUP)) {\n                (_a = toggleButtons[0]) === null || _a === void 0 ? void 0 : _a.focus();\n            }\n            else if (!shift || (relEl === null || relEl === void 0 ? void 0 : relEl.tagName) == TOGGLE_GROUP) {\n                // if checked is true and selectMethod is \"single\", focus that toggle\n                toggleButtons.filter((el) => el.checked)[0].focus();\n            }\n        };\n        this.handleKeyDown = ({ key }) => {\n            if (key !== \"ArrowDown\" &&\n                key !== \"ArrowRight\" &&\n                key !== \"ArrowLeft\" &&\n                key !== \"ArrowUp\")\n                return;\n            const toggleButtonOptions = this.getAllToggleButtons();\n            const targetToggle = toggleButtonOptions[this.getNextItemToSelect(toggleButtonOptions.indexOf(toggleButtonOptions.filter((el) => el === document.activeElement)[0]), key === \"ArrowDown\" || key === \"ArrowRight\")];\n            if (this.selectMethod === \"auto\") {\n                // trigger selectHandler when unable to add 'target'\n                targetToggle.checked = true;\n                this.selectHandler(new CustomEvent(\"icToggleChecked\", {\n                    detail: {\n                        checked: targetToggle.checked,\n                    },\n                }), targetToggle);\n            }\n            else {\n                targetToggle.focus();\n            }\n        };\n        this.getNextItemToSelect = (currentItem, movingDown) => {\n            const toggleButtonOptions = this.getAllToggleButtons();\n            const numToggles = toggleButtonOptions.length - 1;\n            if (currentItem < 1) {\n                currentItem = 0;\n            }\n            let nextItem = movingDown ? currentItem + 1 : currentItem - 1;\n            if (nextItem < 0) {\n                nextItem = numToggles;\n            }\n            else if (nextItem > numToggles) {\n                nextItem = 0;\n            }\n            if (toggleButtonOptions[nextItem].disabled) {\n                nextItem = this.getNextItemToSelect(nextItem, movingDown);\n            }\n            return nextItem;\n        };\n        this.getAllToggleButtons = () => Array.from(this.el.querySelectorAll(\"ic-toggle-button\"));\n    }\n    watchDisabledHandler() {\n        this.getAllToggleButtons().forEach((el) => {\n            el.disabled = this.disabled;\n        });\n        (0,_helpers_56631aa0_js__WEBPACK_IMPORTED_MODULE_1__.r)(this.disabled, this.el);\n    }\n    watchFullWidthHandler() {\n        this.getAllToggleButtons().forEach((el) => {\n            el.fullWidth = this.fullWidth;\n        });\n    }\n    watchLoadingHandler() {\n        this.getAllToggleButtons().forEach((el) => {\n            el.loading = this.loading;\n        });\n    }\n    watchMonochromeHandler() {\n        this.getAllToggleButtons().forEach((el) => {\n            el.monochrome = this.monochrome;\n        });\n    }\n    watchOutlineHandler() {\n        this.getAllToggleButtons().forEach((el) => {\n            el.outline = this.outline;\n        });\n    }\n    watchSizeHandler() {\n        this.getAllToggleButtons().forEach((el) => {\n            el.size = this.size;\n        });\n    }\n    watchThemeHandler() {\n        this.getAllToggleButtons().forEach((el) => {\n            el.theme = this.theme;\n        });\n    }\n    watchTooltipPlacementHandler() {\n        this.getAllToggleButtons().forEach((el) => {\n            el.tooltipPlacement = this.tooltipPlacement;\n        });\n    }\n    watchVariantHandler() {\n        this.getAllToggleButtons().forEach((el) => {\n            el.variant = this.variant;\n        });\n    }\n    selectHandler(ev, tabTarget) {\n        const allToggles = this.getAllToggleButtons();\n        let clickedToggle = ev.target;\n        if (tabTarget)\n            tabTarget.focus(); // tabTarget used in proxySelectHandler\n        if (this.selectType === \"single\") {\n            if (!clickedToggle && tabTarget) {\n                clickedToggle = tabTarget;\n            }\n            allToggles.forEach((el) => {\n                if (el.id !== clickedToggle.id && el.checked) {\n                    el.checked = false;\n                }\n            });\n            this.icChange.emit({\n                checked: ev.detail.checked,\n                selectedOption: clickedToggle,\n            });\n        }\n        else {\n            const toggledOptions = allToggles.filter((el) => el.checked && !el.disabled);\n            this.icChange.emit({\n                checked: toggledOptions.map((opt) => opt.checked),\n                toggledOptions: toggledOptions.map((opt) => ({\n                    toggleButton: opt,\n                })),\n                selectedOption: clickedToggle,\n            });\n        }\n    }\n    componentWillLoad() {\n        if (this.selectType === \"multi\")\n            this.selectMethod = \"manual\";\n        document.addEventListener(\"keydown\", this.keyListener);\n        (0,_helpers_56631aa0_js__WEBPACK_IMPORTED_MODULE_1__.r)(this.disabled, this.el);\n    }\n    componentDidLoad() {\n        this.getAllToggleButtons().forEach((el, i) => {\n            var _a, _b, _c;\n            const btn = (_c = (_b = (_a = el.shadowRoot) === null || _a === void 0 ? void 0 : _a.querySelector(\"ic-button\")) === null || _b === void 0 ? void 0 : _b.shadowRoot) === null || _c === void 0 ? void 0 : _c.querySelector(\"button\");\n            if (btn) {\n                const btnAriaLabel = btn.getAttribute(\"aria-label\");\n                const aria = btnAriaLabel ? `${btnAriaLabel}, ` : \"\";\n                btn.setAttribute(\"aria-label\", `${aria}${this.accessibleLabel}`);\n            }\n            el.id = i.toString();\n            el.tabIndex = -1;\n            el.addEventListener(\"keydown\", (ev) => {\n                this.handleKeyDown(ev);\n            });\n            el.classList.add(\"expand-toggle-group-child\");\n        });\n    }\n    disconnectedCallback() {\n        document === null || document === void 0 ? void 0 : document.removeEventListener(\"keydown\", this.keyListener);\n    }\n    render() {\n        const { accessibleLabel, disabled, fullWidth, loading, monochrome, outline, theme, } = this;\n        return ((0,_index_a7a720e7_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_a7a720e7_js__WEBPACK_IMPORTED_MODULE_0__.H, { key: '58a777e47ee684831b54f2aa7139f091e7a11b29', role: \"group\", \"aria-label\": accessibleLabel, tabindex: 0, class: {\n                \"ic-toggle-button-group-disabled\": disabled,\n                \"ic-toggle-button-group-full-width\": fullWidth,\n                \"ic-toggle-button-group-loading\": loading,\n                \"ic-toggle-button-group-monochrome\": monochrome,\n                \"ic-toggle-button-group-hide-outline\": !outline,\n                [`ic-theme-${theme}`]: theme !== \"inherit\",\n            }, onFocus: this.handleHostFocus }, (0,_index_a7a720e7_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"slot\", { key: 'c748f41a8d8e69c908a8fb1ca4255dfd2ae5d521' })));\n    }\n    get el() { return (0,_index_a7a720e7_js__WEBPACK_IMPORTED_MODULE_0__.g)(this); }\n    static get watchers() { return {\n        \"disabled\": [\"watchDisabledHandler\"],\n        \"fullWidth\": [\"watchFullWidthHandler\"],\n        \"loading\": [\"watchLoadingHandler\"],\n        \"monochrome\": [\"watchMonochromeHandler\"],\n        \"outline\": [\"watchOutlineHandler\"],\n        \"size\": [\"watchSizeHandler\"],\n        \"theme\": [\"watchThemeHandler\"],\n        \"tooltipPlacement\": [\"watchTooltipPlacementHandler\"],\n        \"variant\": [\"watchVariantHandler\"]\n    }; }\n};\nToggleButtonGroup.style = IcToggleButtonGroupStyle0;\n\n\n\n//# sourceMappingURL=ic-toggle-button-group.entry.js.map\n\n//# sourceURL=webpack:///../../../../../../../../node_modules/@ukic/web-components/dist/esm/ic-toggle-button-group.entry.js?\n}");

/***/ })

}]);