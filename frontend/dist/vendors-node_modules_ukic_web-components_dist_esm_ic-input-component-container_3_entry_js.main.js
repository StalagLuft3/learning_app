"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk"] = self["webpackChunk"] || []).push([["vendors-node_modules_ukic_web-components_dist_esm_ic-input-component-container_3_entry_js"],{

/***/ "../../../../../../../../node_modules/@ukic/web-components/dist/esm/check-icon-4a9f8371.js":
/*!*************************************************************************************************!*\
  !*** ../../../../../../../../node_modules/@ukic/web-components/dist/esm/check-icon-4a9f8371.js ***!
  \*************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("{__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   C: () => (/* binding */ Check)\n/* harmony export */ });\nconst Check = `<svg viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M8.79502 15.875L4.62502 11.705L3.20502 13.115L8.79502 18.705L20.795 6.70501L19.385 5.29501L8.79502 15.875Z\" fill=\"currentColor\"/>\n</svg>\n`;\n\n\n\n//# sourceMappingURL=check-icon-4a9f8371.js.map\n\n//# sourceURL=webpack:///../../../../../../../../node_modules/@ukic/web-components/dist/esm/check-icon-4a9f8371.js?\n}");

/***/ }),

/***/ "../../../../../../../../node_modules/@ukic/web-components/dist/esm/ic-input-component-container_3.entry.js":
/*!******************************************************************************************************************!*\
  !*** ../../../../../../../../node_modules/@ukic/web-components/dist/esm/ic-input-component-container_3.entry.js ***!
  \******************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("{__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ic_input_component_container: () => (/* binding */ InputComponentContainer),\n/* harmony export */   ic_input_container: () => (/* binding */ InputContainer),\n/* harmony export */   ic_menu: () => (/* binding */ Menu)\n/* harmony export */ });\n/* harmony import */ var _index_a7a720e7_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index-a7a720e7.js */ \"../../../../../../../../node_modules/@ukic/web-components/dist/esm/index-a7a720e7.js\");\n/* harmony import */ var _helpers_56631aa0_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./helpers-56631aa0.js */ \"../../../../../../../../node_modules/@ukic/web-components/dist/esm/helpers-56631aa0.js\");\n/* harmony import */ var _check_icon_4a9f8371_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./check-icon-4a9f8371.js */ \"../../../../../../../../node_modules/@ukic/web-components/dist/esm/check-icon-4a9f8371.js\");\n/* harmony import */ var _popper_0fbeff6d_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./popper-0fbeff6d.js */ \"../../../../../../../../node_modules/@ukic/web-components/dist/esm/popper-0fbeff6d.js\");\n\n\n\n\n\nconst icInputComponentContainerCss = \"ic-input-component-container{display:flex;border:var(--ic-border-width) solid\\n    var(--border-color, var(--ic-architectural-400));border-radius:var(--ic-border-radius);transition:var(--ic-easing-transition-slow);height:2.5rem;min-height:2.5rem;width:var(--input-width, 20rem);padding:var(--ic-space-1px);background-color:var(--input-bg-color, var(--ic-color-background-primary));box-sizing:border-box;fill:var(--ic-architectural-400);outline:none}ic-input-component-container.ic-input-component-container-full-width{width:100%}ic-input-component-container.ic-input-component-container-disabled,ic-input-component-container.ic-input-component-container-disabled:hover{border:var(--ic-border-width) dashed\\n    var(--border-color-disabled, var(--ic-color-border-neutral-disabled))}ic-input-component-container.ic-input-component-container-readonly,ic-input-component-container.ic-input-component-container-small.ic-input-component-container-readonly,ic-input-component-container.ic-input-component-container-large.ic-input-component-container-readonly{height:auto;background:transparent}ic-input-component-container.ic-input-component-container-readonly,ic-input-component-container.ic-input-component-container-readonly:hover{border:none;padding:0}ic-input-component-container.ic-input-component-container-error{border:var(--ic-space-xxxs) solid\\n    var(--border-color-error, var(--ic-color-border-error));padding:0}ic-input-component-container.ic-input-component-container-error:hover{border:var(--ic-space-xxxs) solid\\n    var(--border-color-error-hover, var(--ic-color-border-error-hover))}ic-input-component-container.ic-input-component-container-error:focus-within{border:var(--ic-space-xxxs) solid\\n    var(--border-color-error-pressed, var(--ic-color-border-error-pressed))}ic-input-component-container.ic-input-component-container-warning{border:var(--ic-space-xxxs) solid\\n    var(--border-color-warning, var(--ic-color-border-warning));padding:0}ic-input-component-container.ic-input-component-container-warning:hover{border:var(--ic-space-xxxs) solid\\n    var(--border-color-warning-hover, var(--ic-color-border-warning-hover))}ic-input-component-container.ic-input-component-container-warning:focus-within{border:var(--ic-space-xxxs) solid\\n    var(--border-color-warning-pressed, var(--ic-color-border-warning-pressed))}ic-input-component-container.ic-input-component-container-success{border:var(--ic-space-xxxs) solid\\n    var(--border-color-success, var(--ic-color-border-success));padding:0}ic-input-component-container.ic-input-component-container-success:hover{border:var(--ic-space-xxxs) solid\\n    var(--border-color-success-hover, var(--ic-color-border-success-hover))}ic-input-component-container.ic-input-component-container-success:focus-within{border:var(--ic-space-xxxs) solid\\n    var(--border-color-success-pressed, var(--ic-color-border-success-pressed))}ic-input-component-container.ic-input-component-container-small{height:var(--ic-space-xl);min-height:var(--ic-space-xl)}ic-input-component-container.ic-input-component-container-large{height:var(--ic-space-xxl);min-height:var(--ic-space-xxl)}ic-input-component-container.ic-input-component-container-multiline{height:auto}ic-input-component-container .icon-container{margin-top:var(--ic-space-xxs);margin-left:0.438rem;display:flex;align-items:center}ic-input-component-container.ic-input-component-container-multiline .icon-container,ic-input-component-container.ic-input-component-container-multiline.ic-input-component-container-small .icon-container{margin-top:0.375rem;display:block}ic-input-component-container.ic-input-component-container-readonly .icon-container{margin-left:-0.313rem}ic-input-component-container.ic-input-component-container-disabled ::-moz-placeholder{display:none}ic-input-component-container.ic-input-component-container-disabled ::placeholder{display:none}ic-input-component-container .inline-success{margin:var(--ic-space-xs) 0.375rem;display:flex;align-items:center}ic-input-component-container .inline-success>svg{fill:var(--ic-input-component-container-success-icon-inline-color);height:1.25rem;width:1.25rem}ic-input-component-container:hover{border:var(--ic-input-component-container-hover-border);border-color:var(--border-color-hover, var(--ic-color-border-neutral-hover));color:var(--ic-action-monochrome-hover-dark)}ic-input-component-container:focus{border:var(--ic-border-pressed);border-color:var(\\n    --border-color-pressed,\\n    var(--ic-color-border-neutral-pressed)\\n  )}.focus-indicator{display:flex;width:100%;margin:-0.125rem;padding:0.125rem;border-radius:var(--ic-border-radius);transition:var(--ic-easing-transition-fast)}.focus-indicator:focus-within,.focus-indicator-enabled{box-shadow:var(--ic-border-focus)}.focus-indicator.ic-input-component-container-dark:focus-within{box-shadow:var(--ic-border-focus)}@media (forced-colors: active){ic-input-component-container,.focus-indicator{transition:none}ic-input-component-container:focus-within{border:var(--ic-border-width) solid Highlight;outline:0.125rem solid Highlight}ic-input-component-container.ic-input-component-container-disabled,ic-input-component-container.ic-input-component-container-disabled:hover{border:var(--ic-border-width) dashed GrayText}}\";\nconst IcInputComponentContainerStyle0 = icInputComponentContainerCss;\n\nconst InputComponentContainer = class {\n    constructor(hostRef) {\n        (0,_index_a7a720e7_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);\n        /**\n         *  If `true`, the disabled state will be set.\n         */\n        this.disabled = false;\n        /**\n         *  If `true`, the input component container will fill the width of the container it is in.\n         */\n        this.fullWidth = false;\n        /**\n         *  If `true`, the input component container will allow for multiple lines.\n         */\n        this.multiLine = false;\n        /**\n         *  If `true`, the readonly state will be set.\n         */\n        this.readonly = false;\n        /**\n         * The size of the input component container component.\n         */\n        this.size = \"medium\";\n        /**\n         *  If `true`, the validation will display inline.\n         */\n        this.validationInline = false;\n        /**\n         * The validation status of the input component container - e.g. 'error' | 'warning' | 'success'.\n         */\n        this.validationStatus = \"\";\n    }\n    watchDisabledHandler() {\n        (0,_helpers_56631aa0_js__WEBPACK_IMPORTED_MODULE_1__.r)(this.disabled, this.el);\n    }\n    componentWillLoad() {\n        (0,_helpers_56631aa0_js__WEBPACK_IMPORTED_MODULE_1__.r)(this.disabled, this.el);\n    }\n    componentDidLoad() {\n        this.hostMutationObserver = new MutationObserver((mutationList) => (0,_helpers_56631aa0_js__WEBPACK_IMPORTED_MODULE_1__.a)(mutationList, \"left-icon\", this));\n        this.hostMutationObserver.observe(this.el, { childList: true });\n    }\n    render() {\n        const { size, validationStatus, disabled, readonly, multiLine, fullWidth, validationInline, } = this;\n        return ((0,_index_a7a720e7_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_a7a720e7_js__WEBPACK_IMPORTED_MODULE_0__.H, { key: 'c33ebfd9dd18101fb9161259538e8e0046f77a3d', class: {\n                [`ic-input-component-container-${size}`]: true,\n                [`ic-input-component-container-${validationStatus}`]: validationStatus !== \"\" && !disabled && !readonly,\n                \"ic-input-component-container-disabled\": !!disabled,\n                \"ic-input-component-container-readonly\": !!readonly,\n                \"ic-input-component-container-multiline\": !!multiLine,\n                \"ic-input-component-container-full-width\": !!fullWidth,\n            }, \"aria-disabled\": disabled ? \"true\" : null }, (0,_index_a7a720e7_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"div\", { key: 'a70f27a3235ac0edb9d9c5a18983ae3c02de2a48', class: \"focus-indicator\" }, (0,_helpers_56631aa0_js__WEBPACK_IMPORTED_MODULE_1__.t)(this.el, \"left-icon\") && ((0,_index_a7a720e7_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"div\", { key: 'aa0b233280382bd0e95a8ff932bf60a63603b7bf', class: \"icon-container\" }, (0,_index_a7a720e7_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"slot\", { key: 'ceb8ec9b420073ac2ecd5d6793ad4342ab9ebbdd', name: \"left-icon\" }))), (0,_index_a7a720e7_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"slot\", { key: '1850c6ed04510e678600c653a36e2114f982e561' }), validationInline &&\n            validationStatus === _helpers_56631aa0_js__WEBPACK_IMPORTED_MODULE_1__.L.Success && ((0,_index_a7a720e7_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"span\", { key: '58d228c595577c1cc9a0fe2b10538cc3efff53ab', class: \"inline-success\", innerHTML: _helpers_56631aa0_js__WEBPACK_IMPORTED_MODULE_1__.U })))));\n    }\n    get el() { return (0,_index_a7a720e7_js__WEBPACK_IMPORTED_MODULE_0__.g)(this); }\n    static get watchers() { return {\n        \"disabled\": [\"watchDisabledHandler\"]\n    }; }\n};\nInputComponentContainer.style = IcInputComponentContainerStyle0;\n\nconst icInputContainerCss = \"ic-input-container .component-container{display:flex;flex-direction:column}\";\nconst IcInputContainerStyle0 = icInputContainerCss;\n\nconst InputContainer = class {\n    constructor(hostRef) {\n        (0,_index_a7a720e7_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);\n        /**\n         * If `true`, the disabled state will be set.\n         */\n        this.disabled = false;\n        /**\n         * If `true`, the readonly state will be set.\n         */\n        this.readonly = false;\n    }\n    render() {\n        return ((0,_index_a7a720e7_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_a7a720e7_js__WEBPACK_IMPORTED_MODULE_0__.H, { key: '32ae22db5e182cc2c092c8f48e61d42a318284a0' }, (0,_index_a7a720e7_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"div\", { key: 'bae9ef74f7f92004ec99c387a213822315c505ba', class: {\n                [\"component-container\"]: true,\n                [\"disabled\"]: !!this.disabled,\n                [\"readonly\"]: !!this.readonly,\n            } }, (0,_index_a7a720e7_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"slot\", { key: 'acca571eaa0d8f19b0e3379d2592409aacf9dd95' }))));\n    }\n};\nInputContainer.style = IcInputContainerStyle0;\n\nconst icMenuCss = \"html.sc-ic-menu{line-height:1.15;-webkit-text-size-adjust:100%}body.sc-ic-menu{margin:0}main.sc-ic-menu{display:block}h1.sc-ic-menu{font-size:2em;margin:0.67em 0}hr.sc-ic-menu{box-sizing:content-box;height:0;overflow:visible}pre.sc-ic-menu{font-family:monospace, monospace;font-size:1em}a.sc-ic-menu{background-color:transparent}abbr[title].sc-ic-menu{border-bottom:none;text-decoration:underline;-webkit-text-decoration:underline dotted;text-decoration:underline dotted}b.sc-ic-menu,strong.sc-ic-menu{font-weight:bolder}code.sc-ic-menu,kbd.sc-ic-menu,samp.sc-ic-menu{font-family:monospace, monospace;font-size:1em}small.sc-ic-menu{font-size:80%}sub.sc-ic-menu,sup.sc-ic-menu{font-size:75%;line-height:0;position:relative;vertical-align:baseline}sub.sc-ic-menu{bottom:-0.25em}sup.sc-ic-menu{top:-0.5em}img.sc-ic-menu{border-style:none}button.sc-ic-menu,input.sc-ic-menu,optgroup.sc-ic-menu,select.sc-ic-menu,textarea.sc-ic-menu{font-family:inherit;font-size:100%;line-height:1.15;margin:0}button.sc-ic-menu,input.sc-ic-menu{overflow:visible}button.sc-ic-menu,select.sc-ic-menu{text-transform:none}button.sc-ic-menu,[type=\\\"button\\\"].sc-ic-menu,[type=\\\"reset\\\"].sc-ic-menu,[type=\\\"submit\\\"].sc-ic-menu{-webkit-appearance:button}button.sc-ic-menu::-moz-focus-inner,[type=\\\"button\\\"].sc-ic-menu::-moz-focus-inner,[type=\\\"reset\\\"].sc-ic-menu::-moz-focus-inner,[type=\\\"submit\\\"].sc-ic-menu::-moz-focus-inner{border-style:none;padding:0}button.sc-ic-menu:-moz-focusring,[type=\\\"button\\\"].sc-ic-menu:-moz-focusring,[type=\\\"reset\\\"].sc-ic-menu:-moz-focusring,[type=\\\"submit\\\"].sc-ic-menu:-moz-focusring{outline:1px dotted ButtonText}fieldset.sc-ic-menu{padding:0.35em 0.75em 0.625em}legend.sc-ic-menu{box-sizing:border-box;color:inherit;display:table;max-width:100%;padding:0;white-space:normal}progress.sc-ic-menu{vertical-align:baseline}textarea.sc-ic-menu{overflow:auto}[type=\\\"checkbox\\\"].sc-ic-menu,[type=\\\"radio\\\"].sc-ic-menu{box-sizing:border-box;padding:0}[type=\\\"number\\\"].sc-ic-menu::-webkit-inner-spin-button,[type=\\\"number\\\"].sc-ic-menu::-webkit-outer-spin-button{height:auto}[type=\\\"search\\\"].sc-ic-menu{-webkit-appearance:textfield;outline-offset:-2px}[type=\\\"search\\\"].sc-ic-menu::-webkit-search-decoration{-webkit-appearance:none}.sc-ic-menu::-webkit-file-upload-button{-webkit-appearance:button;font:inherit}details.sc-ic-menu{display:block}summary.sc-ic-menu{display:list-item}template.sc-ic-menu{display:none}[hidden].sc-ic-menu{display:none}html.sc-ic-menu,body.sc-ic-menu,div.sc-ic-menu,span.sc-ic-menu,applet.sc-ic-menu,object.sc-ic-menu,iframe.sc-ic-menu,h1.sc-ic-menu,h2.sc-ic-menu,h3.sc-ic-menu,h4.sc-ic-menu,h5.sc-ic-menu,h6.sc-ic-menu,p.sc-ic-menu,blockquote.sc-ic-menu,pre.sc-ic-menu,a.sc-ic-menu,abbr.sc-ic-menu,acronym.sc-ic-menu,address.sc-ic-menu,big.sc-ic-menu,cite.sc-ic-menu,code.sc-ic-menu,del.sc-ic-menu,dfn.sc-ic-menu,em.sc-ic-menu,img.sc-ic-menu,ins.sc-ic-menu,kbd.sc-ic-menu,q.sc-ic-menu,s.sc-ic-menu,samp.sc-ic-menu,small.sc-ic-menu,strike.sc-ic-menu,strong.sc-ic-menu,sub.sc-ic-menu,sup.sc-ic-menu,tt.sc-ic-menu,var.sc-ic-menu,b.sc-ic-menu,u.sc-ic-menu,i.sc-ic-menu,center.sc-ic-menu,dl.sc-ic-menu,dt.sc-ic-menu,dd.sc-ic-menu,ol.sc-ic-menu,ul.sc-ic-menu,li.sc-ic-menu,fieldset.sc-ic-menu,form.sc-ic-menu,label.sc-ic-menu,legend.sc-ic-menu,table.sc-ic-menu,caption.sc-ic-menu,tbody.sc-ic-menu,tfoot.sc-ic-menu,thead.sc-ic-menu,tr.sc-ic-menu,th.sc-ic-menu,td.sc-ic-menu,article.sc-ic-menu,aside.sc-ic-menu,canvas.sc-ic-menu,details.sc-ic-menu,embed.sc-ic-menu,figure.sc-ic-menu,figcaption.sc-ic-menu,footer.sc-ic-menu,header.sc-ic-menu,hgroup.sc-ic-menu,menu.sc-ic-menu,nav.sc-ic-menu,output.sc-ic-menu,ruby.sc-ic-menu,section.sc-ic-menu,summary.sc-ic-menu,time.sc-ic-menu,mark.sc-ic-menu,audio.sc-ic-menu,video.sc-ic-menu{margin:0;padding:0;border:0;font-size:100%;font-style:inherit;vertical-align:baseline}@media (prefers-reduced-motion: no-preference){.ic-menu-open.sc-ic-menu-h .menu.sc-ic-menu{transition:max-height var(--ic-transition-duration-slow)}}.sc-ic-menu-h{max-height:0;width:var(--menu-width, var(--input-width, 20rem));color:var(--menu-item-text-color, var(--ic-menu-list-option-text-color));--ic-typography-color:var(\\n    --menu-item-text-color,\\n    var(--ic-menu-list-option-text-color)\\n  );background-color:var(\\n    --menu-bg-color,\\n    var(--ic-menu-list-option-background-color)\\n  );position:relative;z-index:var(--ic-z-index-menu);box-sizing:border-box;box-shadow:var(--ic-elevation-overlay);border-radius:var(--ic-border-radius)}.ic-menu-open.sc-ic-menu-h:not(.ic-menu-no-focus):focus-within{box-shadow:var(--ic-border-focus);outline:var(--ic-hc-focus-outline)}.ic-select-select-all-focused.sc-ic-menu-h{box-shadow:var(--ic-elevation-overlay) !important}#retry-button.sc-ic-menu::part(button){height:var(--ic-space-lg)}.small.sc-ic-menu #retry-button.sc-ic-menu::part(button){height:var(--ic-space-md)}.on-dialog.sc-ic-menu-h{inset:auto !important}.menu.sc-ic-menu{text-decoration:none;list-style-type:none;border-radius:1px;background-color:var(\\n    --menu-bg-color,\\n    var(--ic-menu-list-option-background-color)\\n  );visibility:hidden;max-height:0;overflow-y:hidden}.menu.sc-ic-menu:has(+.option-bar).sc-ic-menu{border-radius:0 0 1px 1px}.menu-scroll.sc-ic-menu{overflow-y:auto}.menu.sc-ic-menu:focus-visible{outline:none}.ic-menu-open.sc-ic-menu-h{max-height:none;display:flex;flex-direction:column-reverse;border:var(--ic-border-width) solid\\n    var(--menu-border-color, var(--ic-menu-border-color));transition:box-shadow var(--ic-easing-transition-fast)}.ic-menu-open.sc-ic-menu-h .menu.sc-ic-menu{visibility:visible;max-height:calc(var(--ic-space-xl) * 10 + var(--ic-space-xxxs))}.ic-menu-open.sc-ic-menu-h .option-bar.sc-ic-menu{visibility:visible}.ic-menu-open.sc-ic-menu-h .select-all-button.sc-ic-menu{display:block}.ic-menu-full-width.sc-ic-menu-h{width:100%}.option.sc-ic-menu{padding:var(--ic-space-xs) calc(var(--ic-space-xs) - var(--ic-space-1px));cursor:pointer;display:flex;align-items:center}.loading-option.sc-ic-menu p.sc-ic-menu{margin-bottom:0 !important}.option.sc-ic-menu:not(.loading-option){justify-content:space-between}.ic-menu-small.sc-ic-menu-h .option.sc-ic-menu{padding:var(--ic-space-xxs) calc(var(--ic-space-xs) - var(--ic-space-1px))}.ic-menu-large.sc-ic-menu-h .option.sc-ic-menu{padding:var(--ic-space-sm) calc(var(--ic-space-xs) - var(--ic-space-1px))}.option.sc-ic-menu:last-child{border-radius:0 0 1px 1px}.sc-ic-menu:not(.menu:has(+.option-bar)).sc-ic-menu .option.sc-ic-menu:first-child{border-radius:1px 1px 0 0}.option.sc-ic-menu:not(.disabled-option):hover{background-color:var(--ic-menu-list-option-hover-background-color)}.option.sc-ic-menu:not(.disabled-option):active{background-color:var(--ic-menu-list-option-pressed-background-color)}.option.sc-ic-menu:focus-visible{outline:var(--ic-hc-focus-outline)}.option.sc-ic-menu:not(.disabled-option) .option-description.sc-ic-menu{--ic-typography-color:var(\\n    --menu-item-desc-text-color,\\n    var(--ic-menu-list-option-description-text-color)\\n  )}.option.sc-ic-menu .option-label.sc-ic-menu{display:flex;flex-direction:row;align-items:top}.option.sc-ic-menu .option-label.sc-ic-menu ic-typography.sc-ic-menu{max-width:100%;word-wrap:break-word}.option.sc-ic-menu .option-element.sc-ic-menu{margin-top:var(--ic-space-xxs)}.option.sc-ic-menu .option-icon.sc-ic-menu{height:var(--ic-space-md);width:var(--ic-space-md);margin-top:var(--ic-space-xxs);margin-right:var(--ic-space-xxxs)}.option-text-container.sc-ic-menu{pointer-events:none;width:100%}.option-text-container.show-check-icon.sc-ic-menu{width:calc(var(--ic-space-lg) * 10 + var(--ic-space-xl))}.option.loading-option.sc-ic-menu .option-text-container.sc-ic-menu{margin-left:calc(var(--ic-space-xs) + var(--ic-space-xxxs));color:var(--ic-menu-loading-list-option-text-color);--ic-typography-color:var(--ic-menu-loading-list-option-text-color)}.error-icon-svg.sc-ic-menu{height:var(--ic-space-md);width:var(--ic-space-md);fill:var(--ic-atoms-status-icon-error);align-self:center;display:flex;margin-right:calc(var(--ic-space-xxs) * 1.2)}.loading-error-info.sc-ic-menu{display:flex}.check-icon.sc-ic-menu{height:var(--ic-space-lg);min-width:var(--ic-space-lg);width:var(--ic-space-lg);margin-left:var(--ic-space-xs);pointer-events:none}.focused-option.sc-ic-menu .check-icon.sc-ic-menu *.sc-ic-menu{fill:currentcolor}.option-group-title.sc-ic-menu{padding:var(--ic-space-lg) calc(var(--ic-space-xs) - var(--ic-space-1px))\\n    var(--ic-space-xs);--ic-typography-color:var(--ic-menu-option-group-label-text-color)}.ic-menu-small.sc-ic-menu-h .option-group-title.sc-ic-menu{padding:var(--ic-space-sm) calc(var(--ic-space-xs) - var(--ic-space-1px))\\n    var(--ic-space-xxs)}.last-recommended-option.sc-ic-menu{border-bottom:var(--ic-menu-last-recommended-option-border)}.disabled-option.sc-ic-menu{color:var(--ic-atoms-list-option-text-disabled-light);--ic-typography-color:var(--ic-atoms-list-option-text-disabled-light);cursor:default;pointer-events:none}.focused-option.sc-ic-menu,.focused-option.sc-ic-menu .option-description.sc-ic-menu{background-color:var(--ic-color-focus-inner) !important;color:var(--ic-atoms-list-option-text-focused-light) !important;--ic-typography-color:var(\\n    --ic-atoms-list-option-text-focused-light\\n  ) !important}.no-results.sc-ic-menu-h li.sc-ic-menu{cursor:no-drop}.no-results.sc-ic-menu-h li.sc-ic-menu:hover{background-color:transparent}.option-bar.sc-ic-menu{padding:var(--ic-space-xxs) var(--ic-space-xs);display:flex;align-items:center;justify-content:space-between;background-color:var(--ic-menu-option-bar-background-color);visibility:hidden;border-bottom:var(--ic-border-width) solid\\n    var(--ic-menu-option-bar-divider-color);border-radius:1px 1px 0 0}.option-bar.sc-ic-menu p.sc-ic-menu{margin-bottom:0 !important}.ic-menu-large.sc-ic-menu-h .option-bar.sc-ic-menu{padding:var(--ic-space-xs)}.select-all-button.sc-ic-menu{display:none}.select-all-button.sc-ic-menu:focus{z-index:calc(var(--ic-z-index-menu) + 1)}@media (forced-colors: active){.focused-option.sc-ic-menu:focus{outline:none;border:0.125rem solid transparent}.disabled-option.sc-ic-menu{color:GrayText;--ic-typography-color:GrayText}}\";\nconst IcMenuStyle0 = icMenuCss;\n\nconst Menu = class {\n    constructor(hostRef) {\n        (0,_index_a7a720e7_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);\n        this.icClear = (0,_index_a7a720e7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, \"icClear\", 7);\n        this.menuKeyPress = (0,_index_a7a720e7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, \"menuKeyPress\", 7);\n        this.menuOptionId = (0,_index_a7a720e7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, \"menuOptionId\", 7);\n        this.menuOptionSelect = (0,_index_a7a720e7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, \"menuOptionSelect\", 7);\n        this.menuOptionSelectAll = (0,_index_a7a720e7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, \"menuOptionSelectAll\", 7);\n        this.menuStateChange = (0,_index_a7a720e7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, \"menuStateChange\", 7);\n        this.retryButtonClicked = (0,_index_a7a720e7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, \"retryButtonClicked\", 7);\n        this.timeoutBlur = (0,_index_a7a720e7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, \"timeoutBlur\", 7);\n        this.ungroupedOptionsSet = (0,_index_a7a720e7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, \"ungroupedOptionsSet\", 7);\n        this.ACTIVE_DESCENDANT = \"aria-activedescendant\";\n        this.CLEAR_BUTTON_ID = \"clear-button\";\n        this.SEARCH_BAR_TAG = \"IC-SEARCH-BAR\";\n        this.disabledOptionSelected = false;\n        this.hasPreviouslyBlurred = false;\n        this.hasTimedOut = false;\n        this.isLoading = false;\n        this.lastOptionSelected = null; // Index of last option selected\n        this.lastOptionFocused = null; // Index of last option focused\n        this.multiOptionClicked = null;\n        this.preventClickOpen = false; // Prevents menu re-opening immediately after it is closed on blur when clicking input.\n        this.preventMenuFocus = false; // (When multiple) ensures focus moves straight to select all button from menu.\n        this.shiftPressed = false;\n        this.ungroupedOptions = [];\n        this.focusFromSearchKeypress = false;\n        this.initialOptionsListRender = false;\n        this.keyboardNav = false;\n        this.preventIncorrectTabOrder = false;\n        this.popperProps = {};\n        /**\n         * Determines whether options manually set as values (by pressing 'Enter') when they receive focus using keyboard navigation.\n         */\n        this.activationType = \"automatic\";\n        /**\n         * @internal If `true`, autofocus will be applied on selected item when menu is open.\n         */\n        this.autofocusOnSelected = true;\n        /**\n         *  If `true`, the menu will close when an option is selected.\n         */\n        this.closeOnSelect = true;\n        /**\n         *  If `true`, the menu will fill the width of the container.\n         */\n        this.fullWidth = false;\n        /**\n         * The custom name for the label field for IcMenuOption.\n         */\n        this.labelField = \"label\";\n        /**\n         * @internal - flag to specify if menu is in a ic-select multiple.\n         */\n        this.multiSelect = false;\n        /**\n         * @internal - flag to specify if menu is in a searchable ic-select.\n         */\n        this.searchableSelect = false;\n        /**\n         * @internal - flag to specify if menu is in a ic-search-bar.\n         */\n        this.searchBar = false;\n        /**\n         * Specify the mode search bar uses to search. `navigation` allows for quick lookups of a set of values, `query` allows for more general searches.\n         */\n        this.searchMode = \"navigation\";\n        /**\n         * @internal If `true`, the icOptionSelect event will be fired on enter instead of ArrowUp and ArrowDown.\n         */\n        this.selectOnEnter = false;\n        /**\n         * The size of the menu.\n         */\n        this.size = \"medium\";\n        /**\n         * The custom name for the value field for IcMenuOption.\n         */\n        this.valueField = \"value\";\n        this.handleClearListener = () => {\n            this.optionHighlighted = \"\";\n        };\n        this.handleSubmitSearch = () => {\n            const highlightedOptionIndex = this.options.findIndex((option) => option[this.valueField] === this.optionHighlighted);\n            this.setInputValue(highlightedOptionIndex);\n        };\n        this.handleMenuChange = (open, focusInput) => {\n            var _a;\n            this.menuStateChange.emit({ open, focusInput });\n            if (!open) {\n                if (focusInput !== false) {\n                    (_a = this.inputEl) === null || _a === void 0 ? void 0 : _a.focus();\n                    this.preventClickOpen = false;\n                }\n                // Reset optionHighlighted so previously highlighted option doesn't get reselected when Enter pressed\n                if (this.multiSelect) {\n                    this.optionHighlighted = undefined;\n                    this.multiOptionClicked = null;\n                }\n            }\n        };\n        this.setNextOptionValue = (selectedOptionIndex) => {\n            if (this.ungroupedOptions[selectedOptionIndex + 1]) {\n                this.menuOptionSelect.emit({\n                    value: this.ungroupedOptions[selectedOptionIndex + 1][this.valueField],\n                    optionId: this.getOptionId(this.ungroupedOptions[selectedOptionIndex + 1][this.valueField]),\n                });\n            }\n            else {\n                this.menuOptionSelect.emit({\n                    value: this.ungroupedOptions[0][this.valueField],\n                    optionId: this.getOptionId(this.ungroupedOptions[0][this.valueField]),\n                });\n            }\n        };\n        this.setPreviousOptionValue = (selectedOptionIndex) => {\n            if (this.ungroupedOptions[selectedOptionIndex - 1]) {\n                this.menuOptionSelect.emit({\n                    value: this.ungroupedOptions[selectedOptionIndex - 1][this.valueField],\n                    optionId: this.getOptionId(this.ungroupedOptions[selectedOptionIndex - 1][this.valueField]),\n                });\n            }\n            else {\n                this.menuOptionSelect.emit({\n                    value: this.ungroupedOptions[this.ungroupedOptions.length - 1][this.valueField],\n                    optionId: this.getOptionId(this.ungroupedOptions[this.ungroupedOptions.length - 1][this.valueField]),\n                });\n            }\n        };\n        // Open menu when up or down arrow keys are pressed\n        this.arrowBehaviour = (event) => {\n            event.preventDefault();\n            this.handleMenuChange(true);\n        };\n        this.getMenuOptions = () => this.searchBar ? this.options : this.ungroupedOptions;\n        // Set option that is focused and so should show focus state\n        this.setHighlightedOption = (highlightedIndex) => {\n            const menuOptions = this.getMenuOptions();\n            menuOptions[highlightedIndex] &&\n                !menuOptions[highlightedIndex].timedOut &&\n                (this.optionHighlighted =\n                    menuOptions[highlightedIndex][this.valueField] || undefined);\n        };\n        // Determines keyboard behaviour when selection is automatic\n        // (i.e. you don't have to press Enter select an option - just focus on it)\n        // and menu is closed\n        this.autoSetInputValueKeyboardOpen = (event) => {\n            const selectedOptionIndex = this.ungroupedOptions.findIndex((option) => option[this.valueField] === this.value);\n            this.keyboardNav = false;\n            switch (event.key) {\n                case \"ArrowDown\":\n                    this.keyboardNav = true;\n                    this.arrowBehaviour(event);\n                    this.setNextOptionValue(selectedOptionIndex);\n                    break;\n                case \"ArrowUp\":\n                    this.keyboardNav = true;\n                    this.arrowBehaviour(event);\n                    this.setPreviousOptionValue(selectedOptionIndex);\n                    break;\n                case \" \":\n                case \"Enter\":\n                    if (event.target.id !== this.CLEAR_BUTTON_ID) {\n                        this.handleMenuChange(true);\n                    }\n                    break;\n            }\n        };\n        this.selectHighlightedOption = (options, highlightedOptionIndex) => {\n            if (!this.isLoading && !this.hasTimedOut) {\n                this.keyboardNav = true;\n            }\n            const isOpen = this.searchBar || this.searchableSelect || this.open;\n            if (isOpen) {\n                if (highlightedOptionIndex >= 0) {\n                    if (options[highlightedOptionIndex] !== undefined) {\n                        if (this.searchBar &&\n                            options[highlightedOptionIndex].disabled === true) {\n                            this.disabledOptionSelected = true;\n                        }\n                        else {\n                            this.setInputValue(highlightedOptionIndex);\n                        }\n                    }\n                }\n                else {\n                    this.setInputValue(highlightedOptionIndex);\n                }\n            }\n            else {\n                this.handleMenuChange(true);\n            }\n        };\n        // Check if option is selected based on the index of the option\n        this.isOptionSelected = (index) => {\n            const menuOptions = this.getMenuOptions();\n            return this.value\n                ? this.value.includes(menuOptions[index][this.valueField])\n                : false;\n        };\n        // Deselect currently selected options when shift pressed, but keep certain options selected\n        this.deselectSelectedOptions = (optionsToKeepSelected) => {\n            const menuOptions = this.getMenuOptions();\n            if (this.value) {\n                const selectedOptionIndexes = this.value.map((value) => {\n                    return menuOptions.findIndex((option) => option[this.valueField] === value);\n                });\n                // Call setInputValue (which toggles the selected state) on options that need to be deselected\n                selectedOptionIndexes.forEach((index) => !optionsToKeepSelected.includes(index) && this.setInputValue(index));\n            }\n        };\n        // Determines keyboard behaviour when selection is manual (i.e. when you have to press Enter to select an option)\n        this.manualSetInputValueKeyboardOpen = (event) => {\n            const menuOptions = this.getMenuOptions();\n            // For preventing focus disappearing on currently focused option when Shift / Cmd / Ctrl pressed\n            // (i.e. when user is likely in the middle of executing a keyboard combination to select options)\n            const isKeyboardCombination = event.shiftKey || event.metaKey || event.ctrlKey;\n            const highlightedOptionIndex = this.getOptionHighlightedIndex();\n            const clickedMultiOptionIndex = menuOptions.findIndex((option) => option[this.valueField] === this.multiOptionClicked);\n            const getOptionId = (index) => { var _a; return (_a = Array.from(this.host.querySelectorAll(\"li\"))[index]) === null || _a === void 0 ? void 0 : _a.id; };\n            // Space press should be equivalent to Enter when multi-select\n            if (event.key === \" \" && this.multiSelect) {\n                this.handleOptionSelect(event, highlightedOptionIndex);\n            }\n            else {\n                switch (event.key) {\n                    case \"ArrowDown\":\n                        this.keyboardNav = true;\n                        this.arrowBehaviour(event);\n                        if (this.multiOptionClicked) {\n                            // Set focus to option last clicked\n                            // Prevents it resetting to the top of the menu when user switches to using keyboard\n                            this.setHighlightedOption(clickedMultiOptionIndex);\n                            this.multiOptionClicked = null;\n                        }\n                        else {\n                            this.handleSingleShiftSelect(event, highlightedOptionIndex, menuOptions);\n                            if (highlightedOptionIndex < menuOptions.length - 1) {\n                                this.setHighlightedOption(highlightedOptionIndex + 1);\n                                this.menuOptionId.emit({\n                                    optionId: getOptionId(highlightedOptionIndex + 1),\n                                });\n                                this.handleSingleShiftSelect(event, highlightedOptionIndex + 1, menuOptions);\n                            }\n                            else {\n                                this.setHighlightedOption(0);\n                                this.menuOptionId.emit({\n                                    optionId: getOptionId(0),\n                                });\n                                this.handleSingleShiftSelect(event, 0, menuOptions);\n                            }\n                            // Deselect currently selected options if arrow was pressed for first time after shift is held\n                            if (this.multiSelect && this.shiftPressed) {\n                                this.deselectSelectedOptions([\n                                    highlightedOptionIndex,\n                                    this.getOptionHighlightedIndex(),\n                                ]);\n                                this.shiftPressed = false;\n                            }\n                        }\n                        this.lastOptionFocused = this.getOptionHighlightedIndex();\n                        this.preventIncorrectTabOrder = false;\n                        this.focusFromSearchKeypress = false;\n                        break;\n                    case \"ArrowUp\":\n                        this.keyboardNav = true;\n                        this.arrowBehaviour(event);\n                        if (this.multiOptionClicked) {\n                            // Set focus to option last clicked\n                            // Prevents it resetting to the bottom of the menu when user switches to using keyboard\n                            this.setHighlightedOption(clickedMultiOptionIndex);\n                            this.multiOptionClicked = null;\n                        }\n                        else {\n                            this.handleSingleShiftSelect(event, highlightedOptionIndex, menuOptions);\n                            if (highlightedOptionIndex <= 0 ||\n                                highlightedOptionIndex > menuOptions.length + 1) {\n                                this.setHighlightedOption(menuOptions.length - 1);\n                                this.menuOptionId.emit({\n                                    optionId: getOptionId(menuOptions.length - 1),\n                                });\n                                this.handleSingleShiftSelect(event, menuOptions.length - 1, menuOptions);\n                            }\n                            else {\n                                this.setHighlightedOption(highlightedOptionIndex - 1);\n                                this.menuOptionId.emit({\n                                    optionId: getOptionId(highlightedOptionIndex - 1),\n                                });\n                                this.handleSingleShiftSelect(event, highlightedOptionIndex - 1, menuOptions);\n                            }\n                            // Deselect currently selected options if arrow was pressed for first time after shift is held\n                            if (this.multiSelect && this.shiftPressed) {\n                                this.deselectSelectedOptions([\n                                    highlightedOptionIndex,\n                                    this.getOptionHighlightedIndex(),\n                                ]);\n                                this.shiftPressed = false;\n                            }\n                        }\n                        this.lastOptionFocused = this.getOptionHighlightedIndex();\n                        this.preventIncorrectTabOrder = false;\n                        this.focusFromSearchKeypress = false;\n                        break;\n                    case \"Home\": {\n                        const startOptionIndex = 0;\n                        this.keyboardNav = true;\n                        event.preventDefault();\n                        this.arrowBehaviour(event);\n                        this.setHighlightedOption(startOptionIndex);\n                        this.menuOptionId.emit({\n                            optionId: getOptionId(startOptionIndex),\n                        });\n                        if (event.shiftKey && event.ctrlKey) {\n                            this.handleMultipleShiftSelect(startOptionIndex);\n                        }\n                        this.lastOptionFocused = startOptionIndex;\n                        this.lastOptionSelected = startOptionIndex;\n                        break;\n                    }\n                    case \"End\": {\n                        const endOptionIndex = menuOptions.length - 1;\n                        this.keyboardNav = true;\n                        event.preventDefault();\n                        this.arrowBehaviour(event);\n                        this.setHighlightedOption(endOptionIndex);\n                        this.menuOptionId.emit({\n                            optionId: getOptionId(endOptionIndex),\n                        });\n                        if (event.shiftKey && event.ctrlKey) {\n                            this.handleMultipleShiftSelect(endOptionIndex);\n                        }\n                        this.lastOptionFocused = endOptionIndex;\n                        this.lastOptionSelected = endOptionIndex;\n                        break;\n                    }\n                    case \" \":\n                        if (!isKeyboardCombination) {\n                            this.keyboardNav = false;\n                        }\n                        if (this.searchBar || this.searchableSelect) {\n                            break;\n                        }\n                        else {\n                            if (event.target.id !== this.CLEAR_BUTTON_ID) {\n                                this.handleMenuChange(true);\n                            }\n                        }\n                        break;\n                    case \"Enter\":\n                        event.preventDefault();\n                        if (!isKeyboardCombination) {\n                            this.keyboardNav = false;\n                        }\n                        this.handleOptionSelect(event, highlightedOptionIndex);\n                        break;\n                    case \"Escape\":\n                        if (this.open) {\n                            event.stopImmediatePropagation();\n                        }\n                        this.handleMenuChange(false);\n                        this.menuOptionId.emit({ optionId: undefined });\n                        break;\n                    case \"a\":\n                        // Checks if Cmd (meta) key is pressed if Mac device (while excluding meta key on Windows)\n                        // Otherwise, if a different OS, checks Ctrl key\n                        if (((0,_helpers_56631aa0_js__WEBPACK_IMPORTED_MODULE_1__.X)() && event.metaKey) ||\n                            (!(0,_helpers_56631aa0_js__WEBPACK_IMPORTED_MODULE_1__.X)() && event.ctrlKey)) {\n                            this.emitSelectAllEvents();\n                            this.lastOptionFocused = null;\n                            this.lastOptionSelected = null;\n                        }\n                        break;\n                    case \"Shift\":\n                    case \"Tab\":\n                        if (event.key === \"Shift\") {\n                            this.shiftPressed = true;\n                        }\n                        if (this.searchBar) {\n                            this.keyboardNav = true;\n                        }\n                        if (this.multiSelect) {\n                            if (this.open && !event.shiftKey && this.selectAllButton) {\n                                event.preventDefault();\n                                this.selectAllButton.focus(); // Move focus to select all button instead of focused option\n                                this.preventMenuFocus = true;\n                                this.preventClickOpen = true;\n                                this.optionHighlighted = undefined; // Stop any option focus states showing when focus moved to select all button\n                            }\n                        }\n                        else {\n                            this.preventIncorrectTabOrder = true;\n                        }\n                        break;\n                    default:\n                        if (!isKeyboardCombination) {\n                            this.keyboardNav = false;\n                        }\n                        this.focusOnSearchOrSelectInput(menuOptions, highlightedOptionIndex);\n                }\n            }\n        };\n        this.setInputValue = (highlightedOptionIndex) => {\n            const menuOptions = this.getMenuOptions();\n            if (menuOptions[highlightedOptionIndex] !== undefined) {\n                this.menuOptionSelect.emit({\n                    value: menuOptions[highlightedOptionIndex][this.valueField],\n                });\n                if (this.closeOnSelect) {\n                    this.optionHighlighted = undefined;\n                    this.menuOptionId.emit({ optionId: undefined });\n                }\n            }\n            if (this.closeOnSelect) {\n                if (!this.hasTimedOut) {\n                    this.handleMenuChange(false);\n                }\n                else {\n                    this.parentEl.setFocus();\n                }\n            }\n        };\n        this.handleOptionClick = (event) => {\n            const { value, label } = event.target.dataset;\n            if (this.multiSelect) {\n                const menuOptions = this.getMenuOptions();\n                const selectedOptionIndex = menuOptions.findIndex((option) => option.value === value);\n                this.handleOptionSelect(event, selectedOptionIndex, true);\n                this.multiOptionClicked = value || null;\n            }\n            else {\n                this.menuOptionSelect.emit({ value, label });\n                this.handleMenuChange(false);\n            }\n            this.optionHighlighted = undefined;\n        };\n        this.handleRetry = () => {\n            this.retryButtonClicked.emit({ value: this.value });\n        };\n        this.handleRetryKeyDown = (ev) => {\n            if (ev.key === \"Enter\" || ev.key === \" \") {\n                ev.preventDefault();\n                this.retryButtonClicked.emit({ value: this.value, keyPressed: ev.key });\n            }\n        };\n        this.handleBlur = (event) => {\n            var _a, _b, _c, _d;\n            if (event.relatedTarget !== this.inputEl) {\n                if (event.relatedTarget === this.selectAllButton) {\n                    (_a = this.menu) === null || _a === void 0 ? void 0 : _a.removeAttribute(this.ACTIVE_DESCENDANT);\n                }\n                if (!(((_b = this.menu) === null || _b === void 0 ? void 0 : _b.contains(event.relatedTarget)) ||\n                    event.relatedTarget === this.selectAllButton)) {\n                    this.handleMenuChange(false, this.hasPreviouslyBlurred);\n                    (_c = this.menu) === null || _c === void 0 ? void 0 : _c.removeAttribute(this.ACTIVE_DESCENDANT);\n                    this.lastOptionFocused = null;\n                    this.lastOptionSelected = null;\n                }\n            }\n            else {\n                this.handleMenuChange(false);\n                this.preventClickOpen = true;\n                (_d = this.menu) === null || _d === void 0 ? void 0 : _d.removeAttribute(this.ACTIVE_DESCENDANT);\n                this.lastOptionFocused = null;\n                this.lastOptionSelected = null;\n            }\n            if (!this.searchBar)\n                this.hasPreviouslyBlurred = !!event.relatedTarget;\n        };\n        this.handleMouseDown = (event) => {\n            event.preventDefault();\n        };\n        this.handleMenuKeyDown = (event) => {\n            if (this.activationType === \"automatic\") {\n                this.autoSetValueOnMenuKeyDown(event);\n            }\n            else if (this.activationType === \"manual\" && !this.searchBar) {\n                this.manualSetInputValueKeyboardOpen(event);\n            }\n        };\n        this.handleMenuKeyUp = (event) => {\n            if (event.key === \"Tab\" && event.shiftKey) {\n                this.preventClickOpen = false;\n            }\n            if (event.key === \"Enter\" && this.disabledOptionSelected) {\n                this.disabledOptionSelected = false;\n                event.stopImmediatePropagation();\n            }\n            if (event.key === \"Shift\") {\n                this.shiftPressed = false;\n            }\n        };\n        this.handleSelectAllClick = () => {\n            var _a;\n            this.keyboardNav = false;\n            (_a = this.menu) === null || _a === void 0 ? void 0 : _a.focus();\n            this.emitSelectAllEvents();\n            this.lastOptionFocused = null;\n            this.lastOptionSelected = null;\n        };\n        this.handleSelectAllBlur = (event) => {\n            var _a;\n            this.host.classList.remove(\"ic-select-select-all-focused\");\n            if (!((_a = this.menu) === null || _a === void 0 ? void 0 : _a.contains(event.relatedTarget))) {\n                this.handleMenuChange(false, false);\n            }\n        };\n        this.handleSelectAllFocus = () => {\n            this.host.classList.add(\"ic-select-select-all-focused\");\n            this.lastOptionFocused = null;\n            this.lastOptionSelected = null;\n        };\n        // Fix for Safari - select all button click was causing menu to close\n        this.handleSelectAllMouseDown = (event) => {\n            event.preventDefault();\n        };\n        // When shift key is being used to select contiguous options one by one on a multi-select\n        // I.e. holding shift and pressing up and down arrow keys\n        this.handleSingleShiftSelect = (event, optionToSelectIndex, options) => {\n            if (this.multiSelect &&\n                event.shiftKey &&\n                !this.isOptionSelected(optionToSelectIndex)) {\n                this.selectHighlightedOption(options, optionToSelectIndex);\n                this.lastOptionSelected = optionToSelectIndex;\n            }\n        };\n        // When shift key is being used to select multiple options at once on a multi-select\n        // I.e. holding shift when selecting another option\n        this.handleMultipleShiftSelect = (lastOptionInSelection, useFocusForSelection = false, firstOptionSelected = null) => {\n            this.shiftPressed = false;\n            const firstOptionInSelection = firstOptionSelected === null\n                ? this.getFirstOptionInSelection(useFocusForSelection)\n                : firstOptionSelected;\n            if (firstOptionInSelection !== null) {\n                const optionsToSelect = [];\n                if (firstOptionInSelection < lastOptionInSelection) {\n                    for (let i = firstOptionInSelection; i < lastOptionInSelection + 1; i++) {\n                        optionsToSelect.push(i);\n                    }\n                }\n                else {\n                    for (let i = firstOptionInSelection; i > lastOptionInSelection - 1; i--) {\n                        optionsToSelect.push(i);\n                    }\n                }\n                optionsToSelect.forEach((optionIndex) => !this.isOptionSelected(optionIndex) && this.setInputValue(optionIndex));\n                this.deselectSelectedOptions(optionsToSelect);\n            }\n        };\n        this.handleOptionSelect = (event, optionIndex, useFocusForSelection = false) => {\n            const menuOptions = this.getMenuOptions();\n            const firstOptionInSelection = this.getFirstOptionInSelection(useFocusForSelection);\n            if (event.shiftKey && firstOptionInSelection !== null) {\n                this.handleMultipleShiftSelect(optionIndex, useFocusForSelection, firstOptionInSelection);\n            }\n            else {\n                this.selectHighlightedOption(menuOptions, optionIndex);\n            }\n            this.lastOptionFocused = optionIndex;\n            this.lastOptionSelected = optionIndex;\n        };\n        this.getFirstOptionInSelection = (useFocusForSelection) => {\n            return useFocusForSelection && this.lastOptionFocused !== null\n                ? this.lastOptionFocused\n                : this.lastOptionSelected !== null\n                    ? this.lastOptionSelected\n                    : null;\n        };\n        this.emitSelectAllEvents = () => {\n            var _a, _b;\n            // Select all if there is either no value or not all options are selected\n            // 'true' means select all, 'false' means clear all\n            this.menuOptionSelectAll.emit({\n                select: !this.value || !(((_a = this.value) === null || _a === void 0 ? void 0 : _a.length) === this.ungroupedOptions.length),\n            });\n            // Emit clear event if all options are selected\n            if (((_b = this.value) === null || _b === void 0 ? void 0 : _b.length) === this.ungroupedOptions.length) {\n                this.icClear.emit();\n            }\n        };\n        this.emitMenuKeyPress = (isNavKey, key) => {\n            this.menuKeyPress.emit({ isNavKey: isNavKey, key: key });\n        };\n        // Determines keyboard behaviour when selection is automatic\n        // (i.e. you don't have to press Enter select an option - just focus on it)\n        // and menu is focused\n        this.autoSetValueOnMenuKeyDown = (event) => {\n            var _a, _b;\n            event.cancelBubble = true;\n            const selectedOptionIndex = this.ungroupedOptions.findIndex((option) => option[this.valueField] === this.value);\n            const isSearchableSelect = !!this.inputEl && this.inputEl.tagName === \"INPUT\";\n            this.keyboardNav = false;\n            switch (event.key) {\n                case \" \":\n                    event.preventDefault();\n                    break;\n                case \"ArrowUp\":\n                    if (!this.hasTimedOut) {\n                        event.preventDefault();\n                        this.setPreviousOptionValue(selectedOptionIndex);\n                        this.keyboardNav = true;\n                    }\n                    break;\n                case \"ArrowDown\":\n                    if (!this.hasTimedOut) {\n                        event.preventDefault();\n                        this.setNextOptionValue(selectedOptionIndex);\n                        this.keyboardNav = true;\n                    }\n                    break;\n                case \"Home\":\n                    this.menuOptionSelect.emit({\n                        value: this.ungroupedOptions[0][this.valueField],\n                    });\n                    this.keyboardNav = true;\n                    break;\n                case \"End\":\n                    this.menuOptionSelect.emit({\n                        value: this.ungroupedOptions[this.ungroupedOptions.length - 1][this.valueField],\n                    });\n                    this.keyboardNav = true;\n                    break;\n                case \"Enter\":\n                    !this.hasTimedOut && this.handleMenuChange(false);\n                    break;\n                case \"Escape\":\n                    this.handleMenuChange(false);\n                    break;\n                case \"Backspace\":\n                    if (isSearchableSelect) {\n                        (_a = this.inputEl) === null || _a === void 0 ? void 0 : _a.focus();\n                    }\n                    break;\n                case \"Shift\":\n                    break;\n                default:\n                    if (isSearchableSelect && event.key !== \"Tab\" && !this.hasTimedOut) {\n                        (_b = this.inputEl) === null || _b === void 0 ? void 0 : _b.focus();\n                    }\n                    if (event.key.length === 1) {\n                        this.keyboardNav = true;\n                    }\n                    break;\n            }\n            this.emitMenuKeyPress(this.keyboardNav, event.key);\n        };\n        this.getOptionId = (value) => {\n            return `${this.menuId}-${value}`;\n        };\n        this.getOptionAriaLabel = (option, parentOption) => {\n            let ariaLabel = option[this.labelField];\n            if (option.description) {\n                ariaLabel = `${ariaLabel}, ${option.description}`;\n            }\n            if (option.element) {\n                ariaLabel = `${ariaLabel}, ${option.element.ariaLabel}`;\n            }\n            if (parentOption) {\n                return `${ariaLabel}, ${parentOption[this.labelField]} group`;\n            }\n            else {\n                return ariaLabel;\n            }\n        };\n        this.getSortedOptions = (options) => {\n            let sorted = [];\n            if (options.sort) {\n                sorted = options.sort((optionA, optionB) => optionA.recommended && !optionB.recommended ? -1 : 0);\n            }\n            return sorted;\n        };\n        this.getOptionHighlightedIndex = () => {\n            const menuOptions = this.getMenuOptions();\n            return menuOptions.findIndex((option) => option[this.valueField] === this.optionHighlighted);\n        };\n        this.isManualMode = this.activationType === \"manual\";\n        this.scrollToSelected = (menu) => {\n            var _a;\n            const selectedOption = this.selectOnEnter\n                ? this.host.querySelector(`li[data-value=\"${this.optionHighlighted}\"]`)\n                : menu.querySelector(\".option[aria-selected='true']\");\n            if (selectedOption) {\n                const elTop = selectedOption.offsetTop + selectedOption.offsetHeight;\n                if (elTop > menu.scrollTop + menu.offsetHeight ||\n                    elTop < menu.scrollTop + menu.offsetHeight) {\n                    menu.scrollTop = selectedOption.offsetTop;\n                }\n                // 'aria-activedescendant' affects screen reader focus\n                // https://www.w3.org/TR/2017/WD-wai-aria-practices-1.1-20170628/#kbd_focus_activedescendant\n                (_a = this.menu) === null || _a === void 0 ? void 0 : _a.setAttribute(this.ACTIVE_DESCENDANT, selectedOption.id);\n                selectedOption.focus();\n            }\n        };\n        // Set 'ungroupedOptions' variable and emit its value\n        // - this is all the options with disabled options and group titles removed\n        this.loadUngroupedOptions = () => {\n            if (this.options.length > 0 && this.options.map) {\n                this.options.map((option) => {\n                    if (option.children) {\n                        option.children.map((option) => !option.disabled && this.ungroupedOptions.push(option));\n                    }\n                    else if (!option.disabled) {\n                        this.ungroupedOptions.push(option);\n                    }\n                });\n            }\n            this.ungroupedOptions = this.getSortedOptions(this.ungroupedOptions);\n            this.ungroupedOptionsSet.emit({ options: this.ungroupedOptions });\n        };\n        this.setMenuScrollbar = () => {\n            var _a;\n            let optionsHeight = 0;\n            this.host\n                .querySelectorAll(\".option, .option-group-title\")\n                .forEach((option) => (optionsHeight += option.clientHeight));\n            if (optionsHeight >= 320) {\n                (_a = this.menu) === null || _a === void 0 ? void 0 : _a.classList.add(\"menu-scroll\");\n            }\n        };\n        this.handleTimeoutBlur = (ev) => {\n            this.timeoutBlur.emit({ ev });\n        };\n        this.optionContent = (option, selected) => {\n            var _a;\n            const showCheckIcon = !!option[this.valueField] &&\n                !!this.value &&\n                selected &&\n                ((_a = this.parentEl) === null || _a === void 0 ? void 0 : _a.tagName) !== this.SEARCH_BAR_TAG;\n            return ((0,_index_a7a720e7_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_a7a720e7_js__WEBPACK_IMPORTED_MODULE_0__.F, null, option.loading && (0,_index_a7a720e7_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"ic-loading-indicator\", { size: \"icon\" }), (0,_index_a7a720e7_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"div\", { class: {\n                    \"option-text-container\": true,\n                    \"show-check-icon\": showCheckIcon,\n                } }, (0,_index_a7a720e7_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"div\", { class: \"option-label\" }, option.icon && ((0,_index_a7a720e7_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"div\", { class: \"option-icon\", innerHTML: option.icon, \"aria-hidden\": \"true\" })), (0,_index_a7a720e7_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"ic-typography\", { variant: \"body\", \"aria-hidden\": \"true\" }, option[this.labelField])), option.description && ((0,_index_a7a720e7_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"ic-typography\", { id: `${this.getOptionId(option[this.valueField])}-description`, class: \"option-description\", variant: \"caption\", \"aria-hidden\": \"true\" }, (0,_index_a7a720e7_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"p\", null, option.description))), option.element && ((0,_index_a7a720e7_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"div\", { class: \"option-element\", innerHTML: option.element.component, \"aria-hidden\": \"true\" }))), showCheckIcon && (0,_index_a7a720e7_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"span\", { class: \"check-icon\", innerHTML: _check_icon_4a9f8371_js__WEBPACK_IMPORTED_MODULE_2__.C })));\n        };\n        this.displayOption = (option, selected, index, parentOption) => {\n            const { open, keyboardNav, isManualMode, initialOptionsListRender, optionHighlighted, options, } = this;\n            return ((0,_index_a7a720e7_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"li\", { id: this.getOptionId(option[this.valueField]), class: {\n                    option: true,\n                    \"focused-option\": isManualMode\n                        ? (keyboardNav || initialOptionsListRender) &&\n                            option[this.valueField] === optionHighlighted\n                        : keyboardNav && selected,\n                    \"last-recommended-option\": !!(option.recommended &&\n                        options[index + 1] &&\n                        !options[index + 1].recommended),\n                    \"disabled-option\": !!option.disabled,\n                    \"loading-option\": !!option.loading,\n                    timeout: !!option.timedOut,\n                }, role: \"option\", tabindex: open &&\n                    (selected || option[this.valueField] === optionHighlighted) &&\n                    keyboardNav\n                    ? \"0\"\n                    : \"-1\", \"aria-label\": this.getOptionAriaLabel(option, parentOption), \"aria-selected\": selected ? \"true\" : \"false\", \"aria-disabled\": option.disabled ? \"true\" : \"false\", onClick: !option.timedOut && !option.loading\n                    ? this.handleOptionClick\n                    : undefined, onBlur: this.handleBlur, onMouseDown: this.handleMouseDown, \"data-value\": option[this.valueField], \"data-label\": option[this.labelField] }, option.timedOut ? ((0,_index_a7a720e7_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_a7a720e7_js__WEBPACK_IMPORTED_MODULE_0__.F, null, (0,_index_a7a720e7_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"div\", { class: \"loading-error-info\" }, (0,_index_a7a720e7_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"svg\", { class: \"error-icon-svg\", \"aria-labelledby\": \"error-title\", xmlns: \"http://www.w3.org/2000/svg\", viewBox: \"0 0 24 24\", fill: \"#000000\" }, (0,_index_a7a720e7_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"title\", { id: \"error-title\" }, \"Error\"), (0,_index_a7a720e7_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"g\", { id: \"close-octagon\" }, (0,_index_a7a720e7_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"path\", { id: \"Vector\", d: \"M8.77 3L3.5 8.27V15.73L8.77 21H16.23L21.5 15.73V8.27L16.23 3M8.91 7L12.5 10.59L16.09 7L17.5 8.41L13.91 12L17.5 15.59L16.09 17L12.5 13.41L8.91 17L7.5 15.59L11.09 12L7.5 8.41\" }))), (0,_index_a7a720e7_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"ic-typography\", { variant: \"label\" }, option[this.labelField])), (0,_index_a7a720e7_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"ic-button\", { size: \"small\", variant: \"tertiary\", onClick: this.handleRetry, onKeyDown: this.handleRetryKeyDown, onBlur: this.handleTimeoutBlur, id: \"retry-button\" }, \"Retry\"))) : (this.optionContent(option, selected))));\n        };\n    }\n    watchOpenHandler() {\n        if (!this.open && this.popperInstance) {\n            this.popperInstance.destroy();\n            this.popperInstance = null;\n        }\n    }\n    watchOptionsHandler(newOptions) {\n        this.hasTimedOut = newOptions.some((opt) => opt.timedOut);\n        this.isLoading = newOptions.some((opt) => opt.loading);\n        this.ungroupedOptions = [];\n        this.loadUngroupedOptions();\n    }\n    connectedCallback() {\n        if (this.searchBar) {\n            if (this.searchMode === \"navigation\")\n                this.setHighlightedOption(0);\n            this.initialOptionsListRender = true;\n        }\n    }\n    disconnectedCallback() {\n        var _a, _b, _c;\n        (_a = this.popperInstance) === null || _a === void 0 ? void 0 : _a.destroy();\n        (_b = this.parentEl) === null || _b === void 0 ? void 0 : _b.removeEventListener(\"icClear\", this.handleClearListener);\n        (_c = this.parentEl) === null || _c === void 0 ? void 0 : _c.removeEventListener(\"icSubmitSearch\", this.handleSubmitSearch);\n    }\n    componentWillLoad() {\n        var _a, _b, _c, _d;\n        this.loadUngroupedOptions();\n        (_a = this.parentEl) === null || _a === void 0 ? void 0 : _a.addEventListener(\"icClear\", this.handleClearListener);\n        (_b = this.parentEl) === null || _b === void 0 ? void 0 : _b.addEventListener(\"icSubmitSearch\", this.handleSubmitSearch);\n        this.hasTimedOut = (_c = this.options) === null || _c === void 0 ? void 0 : _c.some((opt) => opt.timedOut);\n        this.isLoading = (_d = this.options) === null || _d === void 0 ? void 0 : _d.some((opt) => opt.loading);\n    }\n    componentDidLoad() {\n        if (this.searchBar &&\n            this.parentEl.disableAutoFiltering) {\n            this.focusFromSearchKeypress = true;\n        }\n        (0,_helpers_56631aa0_js__WEBPACK_IMPORTED_MODULE_1__.o)([\n            { prop: this.open, propName: \"open\" },\n            { prop: this.options, propName: \"options\" },\n            { prop: this.menuId, propName: \"menu-id\" },\n            { prop: this.inputLabel, propName: \"input-label\" },\n            //NOTE: no check for value, input-el or anchor-el as otherwise get console errors on first load of select component\n        ], \"Menu\");\n    }\n    componentDidUpdate() {\n        const inputValueInOptions = this.options.some((option) => option[this.valueField] === this.value);\n        if (this.menu &&\n            this.open &&\n            this.options.length !== 0 &&\n            !this.preventMenuFocus) {\n            if (this.value &&\n                this.keyboardNav &&\n                inputValueInOptions &&\n                this.autofocusOnSelected &&\n                !this.searchableSelect) {\n                this.scrollToSelected(this.menu);\n            }\n            else if (this.selectOnEnter) {\n                this.menu.focus();\n            }\n            else if (!!this.optionHighlighted &&\n                !this.focusFromSearchKeypress &&\n                !this.preventIncorrectTabOrder) {\n                const highlightedEl = this.host.querySelector(`li[data-value=\"${this.optionHighlighted}\"]`);\n                if (highlightedEl) {\n                    this.menu.setAttribute(this.ACTIVE_DESCENDANT, highlightedEl.id);\n                    highlightedEl.focus();\n                }\n            }\n            else if (this.inputEl && this.inputEl.tagName !== \"INPUT\") {\n                this.menu.focus();\n            }\n        }\n        if (this.menu && this.open && !this.value && this.selectOnEnter) {\n            this.scrollToSelected(this.menu);\n        }\n        this.preventMenuFocus = false;\n    }\n    componentDidRender() {\n        if (this.open && !this.popperInstance && this.anchorEl) {\n            this.initPopperJs(this.anchorEl);\n        }\n        if (this.open && !!this.options.length) {\n            this.setMenuScrollbar();\n        }\n    }\n    /**\n     * @internal If menu is opened with the mouse, emit menuStateChange custom event.\n     */\n    async handleClickOpen() {\n        if (!this.preventClickOpen) {\n            this.menuStateChange.emit({ open: !this.open });\n            this.keyboardNav = false;\n        }\n        this.preventClickOpen = false;\n    }\n    /**\n     * Used alongside activationType\n     * If menu is opened via keyboard navigation (i.e. Enter, ArrowUp or ArrowDown), emit optionSelect custom event.\n     * @param {KeyboardEvent} event The keyboard event which is available when handleKeyboardOpen is invoked.\n     */\n    async handleKeyboardOpen(event) {\n        if (this.activationType === \"automatic\") {\n            this.autoSetInputValueKeyboardOpen(event);\n        }\n        else {\n            this.manualSetInputValueKeyboardOpen(event);\n        }\n    }\n    /**\n     * @internal Used to highlight the first option in the menu.\n     */\n    async handleSetFirstOption() {\n        this.setHighlightedOption(0);\n    }\n    /**\n     * @internal Used to initialize popperJS with an anchor element.\n     * 5/12/2023: Tested with Floating UI, however, discovered inconsistent\n     * boundary behaviour so sticking with PopperJS.\n     */\n    async initPopperJs(anchor) {\n        // Placements set to \"-start\" to accommodate for custom menu width - menu should always be aligned to the left\n        this.popperInstance = (0,_popper_0fbeff6d_js__WEBPACK_IMPORTED_MODULE_3__.c)(anchor, this.host, Object.assign({ placement: \"bottom-start\", modifiers: [\n                {\n                    name: \"offset\",\n                    options: {\n                        offset: [0, 7],\n                    },\n                },\n                {\n                    name: \"flip\",\n                    options: {\n                        fallbackPlacements: [\"top-start\"],\n                        rootBoundary: \"viewport\",\n                    },\n                },\n            ] }, this.popperProps));\n    }\n    /**\n     * @internal This method allows props to be added to the PopperJS createPopper instance outside of the menu\n     * @param props object - createPopper props set externally\n     */\n    async setExternalPopperProps(props) {\n        this.popperProps = props;\n    }\n    focusOnSearchOrSelectInput(menuOptions, highlightedOptionIndex) {\n        if (!menuOptions[highlightedOptionIndex])\n            return;\n        if (this.searchBar) {\n            this.parentEl.setFocus();\n            if (this.searchMode === \"navigation\")\n                this.setHighlightedOption(0);\n        }\n        if (this.searchableSelect) {\n            this.parentEl.setFocus();\n        }\n        this.focusFromSearchKeypress = true;\n    }\n    render() {\n        const { inputLabel, options, menuId, value, fullWidth, hasTimedOut, isLoading, size, open, inputEl, keyboardNav, parentEl, SEARCH_BAR_TAG, multiSelect, } = this;\n        const selectAllButtonText = `${(value === null || value === void 0 ? void 0 : value.length) === this.ungroupedOptions.length ? \"Clear\" : \"Select\"} all`;\n        const hasNoResults = this.host.classList.contains(\"no-results\");\n        return ((0,_index_a7a720e7_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_a7a720e7_js__WEBPACK_IMPORTED_MODULE_0__.H, { key: '61aef706407716bbd85f087d6baeac4e393f5bb5', class: {\n                \"ic-menu-full-width\": !!fullWidth,\n                \"ic-menu-no-focus\": ((inputEl === null || inputEl === void 0 ? void 0 : inputEl.tagName) === \"INPUT\" &&\n                    (parentEl === null || parentEl === void 0 ? void 0 : parentEl.tagName) !== SEARCH_BAR_TAG) ||\n                    hasTimedOut ||\n                    isLoading,\n                [`ic-menu-${size}`]: true,\n                \"ic-menu-open\": open && options.length !== 0,\n                \"ic-menu-multiple\": multiSelect,\n            } }, options.length !== 0 && ((0,_index_a7a720e7_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"ul\", { key: '5800fadeb848cfad908cdbd2bb7bfd7ecba08811', id: menuId, class: \"menu\", role: \"listbox\", \"aria-label\": `${inputLabel} pop-up`, \"aria-multiselectable\": multiSelect ? \"true\" : \"false\", tabindex: open &&\n                !keyboardNav &&\n                ((inputEl === null || inputEl === void 0 ? void 0 : inputEl.tagName) !== \"INPUT\" ||\n                    (parentEl === null || parentEl === void 0 ? void 0 : parentEl.tagName) === SEARCH_BAR_TAG)\n                ? \"0\"\n                : \"-1\", ref: (el) => (this.menu = el), onKeyDown: this.handleMenuKeyDown, onKeyUp: this.handleMenuKeyUp, onBlur: this.handleBlur }, this.getSortedOptions(options).map((option, index) => {\n            if (option.children) {\n                if (option.children.length > 0) {\n                    return ((0,_index_a7a720e7_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"div\", null, (0,_index_a7a720e7_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"ic-typography\", { class: \"option-group-title\", role: \"presentation\", variant: \"subtitle-small\" }, (0,_index_a7a720e7_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"p\", null, option[this.labelField])), option.children.map((childOption) => childOption.label &&\n                        this.displayOption(childOption, multiSelect\n                            ? value === null || value === void 0 ? void 0 : value.includes(childOption[this.valueField])\n                            : childOption[this.valueField] === value, index, option))));\n                }\n                else {\n                    return null;\n                }\n            }\n            else {\n                // Display option only if it has a label (rather than displaying an empty space)\n                return (option.label &&\n                    this.displayOption(option, multiSelect\n                        ? value === null || value === void 0 ? void 0 : value.includes(option[this.valueField])\n                        : option[this.valueField] === value, index));\n            }\n        }))), options.length !== 0 &&\n            multiSelect &&\n            !isLoading &&\n            !hasTimedOut &&\n            !hasNoResults && ((0,_index_a7a720e7_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"div\", { key: '3036b8e8b5727e354d45e9ae4a64a5e61b0caf59', class: \"option-bar\" }, (0,_index_a7a720e7_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"ic-typography\", { key: 'a797367880dd2a45638c65dcb353e6b4892e5db0' }, (0,_index_a7a720e7_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"p\", { key: 'ba309efe02198f93aa62329cf99d05e2e538434d' }, `${value ? value.length : 0}/${(0,_helpers_56631aa0_js__WEBPACK_IMPORTED_MODULE_1__.J)(this.options)} selected`)), (0,_index_a7a720e7_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"ic-button\", { key: '785eba9a6e82e745c7f4ccb054a1fbaf87df281e', class: \"select-all-button\", \"aria-label\": `${selectAllButtonText} options for ${inputLabel}`, ref: (el) => (this.selectAllButton = el), variant: \"tertiary\", onClick: this.handleSelectAllClick, onMouseDown: this.handleSelectAllMouseDown, onBlur: this.handleSelectAllBlur, onFocus: this.handleSelectAllFocus, size: size === \"small\" ? \"small\" : \"medium\" }, selectAllButtonText)))));\n    }\n    get host() { return (0,_index_a7a720e7_js__WEBPACK_IMPORTED_MODULE_0__.g)(this); }\n    static get watchers() { return {\n        \"open\": [\"watchOpenHandler\"],\n        \"options\": [\"watchOptionsHandler\"]\n    }; }\n};\nMenu.style = IcMenuStyle0;\n\n\n\n//# sourceMappingURL=ic-input-component-container_3.entry.js.map\n\n//# sourceURL=webpack:///../../../../../../../../node_modules/@ukic/web-components/dist/esm/ic-input-component-container_3.entry.js?\n}");

/***/ })

}]);