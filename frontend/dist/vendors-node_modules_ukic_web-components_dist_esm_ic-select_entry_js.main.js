"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk"] = self["webpackChunk"] || []).push([["vendors-node_modules_ukic_web-components_dist_esm_ic-select_entry_js"],{

/***/ "../../../../../../../../node_modules/@ukic/web-components/dist/esm/ic-select.entry.js":
/*!*********************************************************************************************!*\
  !*** ../../../../../../../../node_modules/@ukic/web-components/dist/esm/ic-select.entry.js ***!
  \*********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("{__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ic_select: () => (/* binding */ Select)\n/* harmony export */ });\n/* harmony import */ var _index_a7a720e7_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index-a7a720e7.js */ \"../../../../../../../../node_modules/@ukic/web-components/dist/esm/index-a7a720e7.js\");\n/* harmony import */ var _helpers_56631aa0_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./helpers-56631aa0.js */ \"../../../../../../../../node_modules/@ukic/web-components/dist/esm/helpers-56631aa0.js\");\n\n\n\nconst Expand = `<svg viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M7 9.5L12 14.5L17 9.5H7Z\" fill=\"currentColor\" />\n</svg>\n`;\n\nconst Clear = `<svg width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M12.6666 4.27334L11.7266 3.33334L7.99998 7.06001L4.27331 3.33334L3.33331 4.27334L7.05998 8.00001L3.33331 11.7267L4.27331 12.6667L7.99998 8.94001L11.7266 12.6667L12.6666 11.7267L8.93998 8.00001L12.6666 4.27334Z\" fill=\"currentColor\" />\n</svg>\n`;\n\nconst icSelectCss = \"/*! normalize.css v8.0.1 | MIT License | github.com/necolas/normalize.css */html{line-height:1.15;-webkit-text-size-adjust:100%;}body{margin:0}main{display:block}h1{font-size:2em;margin:0.67em 0}hr{box-sizing:content-box;height:0;overflow:visible;}pre{font-family:monospace, monospace;font-size:1em;}a{background-color:transparent}abbr[title]{border-bottom:none;text-decoration:underline;-webkit-text-decoration:underline dotted;text-decoration:underline dotted;}b,strong{font-weight:bolder}code,kbd,samp{font-family:monospace, monospace;font-size:1em;}small{font-size:80%}sub,sup{font-size:75%;line-height:0;position:relative;vertical-align:baseline}sub{bottom:-0.25em}sup{top:-0.5em}img{border-style:none}button,input,optgroup,select,textarea{font-family:inherit;font-size:100%;line-height:1.15;margin:0;}button,input{overflow:visible}button,select{text-transform:none}button,[type=\\\"button\\\"],[type=\\\"reset\\\"],[type=\\\"submit\\\"]{-webkit-appearance:button}button::-moz-focus-inner,[type=\\\"button\\\"]::-moz-focus-inner,[type=\\\"reset\\\"]::-moz-focus-inner,[type=\\\"submit\\\"]::-moz-focus-inner{border-style:none;padding:0}button:-moz-focusring,[type=\\\"button\\\"]:-moz-focusring,[type=\\\"reset\\\"]:-moz-focusring,[type=\\\"submit\\\"]:-moz-focusring{outline:1px dotted ButtonText}fieldset{padding:0.35em 0.75em 0.625em}legend{box-sizing:border-box;color:inherit;display:table;max-width:100%;padding:0;white-space:normal;}progress{vertical-align:baseline}textarea{overflow:auto}[type=\\\"checkbox\\\"],[type=\\\"radio\\\"]{box-sizing:border-box;padding:0;}[type=\\\"number\\\"]::-webkit-inner-spin-button,[type=\\\"number\\\"]::-webkit-outer-spin-button{height:auto}[type=\\\"search\\\"]{-webkit-appearance:textfield;outline-offset:-2px;}[type=\\\"search\\\"]::-webkit-search-decoration{-webkit-appearance:none}::-webkit-file-upload-button{-webkit-appearance:button;font:inherit;}details{display:block}summary{display:list-item}template{display:none}[hidden]{display:none}html,body,div,span,applet,object,iframe,h1,h2,h3,h4,h5,h6,p,blockquote,pre,a,abbr,acronym,address,big,cite,code,del,dfn,em,img,ins,kbd,q,s,samp,small,strike,strong,sub,sup,tt,var,b,u,i,center,dl,dt,dd,ol,ul,li,fieldset,form,label,legend,table,caption,tbody,tfoot,thead,tr,th,td,article,aside,canvas,details,embed,figure,figcaption,footer,header,hgroup,menu,nav,output,ruby,section,summary,time,mark,audio,video{margin:0;padding:0;border:0;font-size:100%;font-style:inherit;vertical-align:baseline}:host{display:block;position:relative;--ic-input-label-helpertext-padding:var(--ic-space-xs);--menu-max-height:100px;--border-color:var(--ic-select-field-border);--border-color-hover:var(--ic-select-field-border-hover);--border-color-pressed:var(--ic-select-field-border-pressed);--border-color-disabled:var(--ic-select-field-border-disabled);--border-color-error:var(--ic-select-field-border-error);--border-color-error-hover:var(--ic-select-field-border-error-hover);--border-color-error-pressed:var(--ic-select-field-border-error-pressed);--border-color-success:var(--ic-select-field-border-success);--border-color-success-hover:var(--ic-select-field-border-success-hover);--border-color-success-pressed:var(--ic-select-field-border-success-pressed);--border-color-warning:var(--ic-select-field-border-warning);--border-color-warning-hover:var(--ic-select-field-border-warning-hover);--border-color-warning-pressed:var(--ic-select-field-border-warning-pressed);--ic-input-label-text-color:var(--ic-select-field-labe);--ic-input-label-helper-text-color:var(\\n    --ic-select-input-field-label-subtitle\\n  );--ic-input-validation-status-text-color:var(--ic-select-state-text);--ic-input-validation-error:var(--ic-select-state-icon-error);--ic-input-validation-warning-icon-color:var(--ic-select-state-icon-warning);--ic-input-validation-success-icon-color:var(--ic-select-state-icon-success);--menu-item-text-color:var(--ic-select-list-option-text);--menu-bg-color:var(--ic-select-list-option-background);--menu-border-color:var(--ic-select-dropdown-list-border)}:host(.ic-select-disabled){--ic-input-label-text-color:var(--ic-select-field-label-disabled);--ic-input-label-helper-text-color:var(\\n    --ic-select-input-field-label-subtitle-disabled\\n  )}:host(.ic-select-full-width){width:100%}ic-input-component-container.menu-open{--border-color:var(--ic-select-field-border-pressed)}ic-input-validation .status-icon,ic-input-validation .statustext{visibility:visible}ic-input-validation.menu-open .status-icon,ic-input-validation.menu-open .statustext{visibility:hidden;transition:visibility 0s}ic-input-label{margin-bottom:var(--ic-space-xs)}select{border:0;border-radius:var(--ic-border-radius);background-color:var(--ic-select-field-background);color:var(--ic-select-content-text);line-height:1.5rem;letter-spacing:0.005rem;width:100%;height:100%;padding-left:0.375rem;-webkit-appearance:none;-moz-appearance:none;appearance:none;background-repeat:no-repeat;background-position:right 0.375rem center;background-image:var(--ic-select-mobile-dropdown-icon);caret-color:var(--ic-select-input-field-text-cursor)}select option,.select-option-selected{color:var(--ic-select-list-option-text)}select:disabled{color:var(--ic-select-content-text-disabled);background-image:var(--ic-select-mobile-dropdown-icon-disabled)}select:focus{border:0;outline:0}select:not([disabled]){cursor:pointer}.select-container{width:100%;display:flex;align-items:center;position:relative}.select-input{width:100%;height:100%;padding:0 0.375rem;display:flex;cursor:pointer;align-items:center;justify-content:space-between;background:none;border:none;background-color:var(--ic-select-field-background);color:var(--ic-select-content-text)}.select-input:focus{outline:none}.select-input[disabled]{pointer-events:none}:host(.ic-select-searchable) .select-input{cursor:auto}.select-input.with-clear-button{padding-right:0}.value-text{max-width:calc(100% - (var(--ic-space-lg) + var(--ic-space-xxs)));box-sizing:border-box;white-space:nowrap;text-overflow:ellipsis;overflow:hidden;margin-bottom:0 !important}.value-text.with-clear-button{padding-right:calc(var(--ic-space-xl) + var(--ic-space-xs))}.searchable-select-container{align-items:center;display:flex;width:100%;position:relative}.expand-icon{height:var(--ic-space-lg);padding-left:var(--ic-space-xxs);color:var(--ic-select-expand-icon-color)}.expand-icon>svg{display:inline-block;width:var(--ic-space-lg);height:var(--ic-space-lg)}:host(.ic-select-disabled) .expand-icon,:host(.ic-select-disabled) .expand-icon>svg>path{color:var(--ic-select-disabled-expand-icon-color)}:host(.ic-select-searchable) .expand-icon{padding-left:0;height:2.25rem}:host(.ic-select-searchable) .expand-icon>svg{height:2.25rem;padding:0 calc(var(--ic-space-xxxs) + var(--ic-space-xxs)) 0\\n    var(--ic-space-xxs)}:host(.ic-select-searchable:not(.ic-select-disabled)) .expand-icon>svg{cursor:pointer}.expand-icon-open{color:var(--ic-select-expand-icon-color)}.expand-icon-open,:host(.ic-select-searchable) .expand-icon-open{transform:rotateX(180deg)}.placeholder{color:var(--ic-select-content-placeholder-text)}:host(.ic-select-disabled.ic-select-searchable) .select-input::-moz-placeholder{color:var(--ic-select-content-text-disabled)}:host(.ic-select-disabled) .value-text,:host(.ic-select-disabled) .select-input,:host(.ic-select-disabled) .placeholder,:host(.ic-select-disabled.ic-select-searchable) .select-input::placeholder{color:var(--ic-select-content-text-disabled)}.select-input-end{display:flex;align-items:center}.clear-button-container{display:flex;align-items:center}.divider{width:var(--ic-space-1px);background-color:var(--ic-select-content-divider);margin:var(--ic-space-xxs) 0;border-radius:var(--ic-space-1px);height:var(--ic-space-lg)}:host(.ic-select-small) .divider{height:var(--ic-space-md)}:host(.ic-select-large) .divider{height:var(--ic-space-xl)}.clear-button{color:var(--ic-select-clear-button);position:absolute;right:calc(var(--ic-space-xl) + var(--ic-space-xxs) - var(--ic-space-1px));border-radius:var(--ic-border-radius);transition:box-shadow var(--ic-easing-transition),\\n    border-radius var(--ic-easing-transition)}.clear-button:focus,.clear-button:active{background-color:var(--ic-color-focus-inner);box-shadow:inset 0 0 0 0.125rem var(--ic-color-focus-outer);border-radius:0.25rem}.clear-button:focus,.clear-button:active *{fill:var(--ic-atoms-input-clear-button-focus)}.clear-button.searchable{position:static}.searchable-select-results-status,.multi-select-selected-count{border:0;clip:rect(0, 0, 0, 0, 0);height:var(--ic-space-1px);overflow:hidden;padding:0;position:absolute;white-space:nowrap;width:var(--ic-space-1px)}::slotted([slot=\\\"icon\\\"]){fill:var(--ic-select-content-placeholder-text)}.has-value ::slotted([slot=\\\"icon\\\"]){fill:var(--ic-select-content-text)}.readonly ::slotted([slot=\\\"icon\\\"]){padding:0.375rem;margin-bottom:0.75rem}@media (forced-colors: active){.has-value ::slotted([slot=\\\"icon\\\"]){fill:currentcolor}}\";\nconst IcSelectStyle0 = icSelectCss;\n\nlet inputIds = 0;\nconst MUTABLE_ATTRIBUTES = [..._helpers_56631aa0_js__WEBPACK_IMPORTED_MODULE_1__.z, \"tabindex\", \"title\"];\nconst Select = class {\n    constructor(hostRef) {\n        (0,_index_a7a720e7_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);\n        this.icBlur = (0,_index_a7a720e7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, \"icBlur\", 7);\n        this.icChange = (0,_index_a7a720e7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, \"icChange\", 7);\n        this.icClear = (0,_index_a7a720e7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, \"icClear\", 7);\n        this.icClose = (0,_index_a7a720e7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, \"icClose\", 7);\n        this.icFocus = (0,_index_a7a720e7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, \"icFocus\", 7);\n        this.icInput = (0,_index_a7a720e7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, \"icInput\", 7);\n        this.icOpen = (0,_index_a7a720e7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, \"icOpen\", 7);\n        this.icOptionSelect = (0,_index_a7a720e7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, \"icOptionSelect\", 7);\n        this.icOptionDeselect = (0,_index_a7a720e7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, \"icOptionDeselect\", 7);\n        this.icRetryLoad = (0,_index_a7a720e7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, \"icRetryLoad\", 7);\n        this.blurredBecauseButtonPressed = false;\n        this.hasSetDefaultValue = false;\n        this.hasTimedOut = false;\n        this.inheritedAttributes = {};\n        this.initialOptionsEmpty = false;\n        this.inputId = `ic-select-input-${inputIds++}`;\n        this.menuId = `${this.inputId}-menu`;\n        this.retryButtonClick = false;\n        this.searchableMenuItemSelected = false;\n        this.ungroupedOptions = [];\n        this.hostMutationObserver = null;\n        this.clearButtonFocused = false;\n        this.noOptions = null;\n        this.open = false;\n        this.pressedCharacters = \"\";\n        this.searchableSelectInputValue = null;\n        /**\n         * If `true`, the disabled state will be set.\n         */\n        this.disabled = false;\n        /**\n         * If `true`, the built in filtering will be disabled for a searchable variant. For example, if options will already be filtered from external source.\n         */\n        this.disableAutoFiltering = false;\n        /**\n         * The text displayed when there are no options in the option list.\n         */\n        this.emptyOptionListText = \"No results found\";\n        /**\n         * If `true`, the select will fill the width of the container.\n         */\n        this.fullWidth = false;\n        /**\n         * The helper text that will be displayed for additional field guidance.\n         */\n        this.helperText = \"\";\n        /**\n         * If `true`, the label will be hidden and the required label value will be applied as an aria-label.\n         */\n        this.hideLabel = false;\n        /**\n         * If `true`, descriptions of options will be included when filtering options in a searchable select. Only applies to built in filtering.\n         */\n        this.includeDescriptionsInSearch = false;\n        /**\n         * If `true`, group titles of grouped options will be included when filtering options in a searchable select. Only applies to built in filtering.\n         */\n        this.includeGroupTitlesInSearch = false;\n        /**\n         * The message displayed when external loading times out.\n         */\n        this.loadingErrorLabel = \"Loading Error\";\n        /**\n         * The message displayed whilst the options are being loaded externally.\n         */\n        this.loadingLabel = \"Loading...\";\n        /**\n         * If `true`, multiple options can be selected.\n         */\n        this.multiple = false;\n        /**\n         * The name of the control, which is submitted with the form data.\n         */\n        this.name = this.inputId;\n        /**\n         * The placeholder value to be displayed.\n         */\n        this.placeholder = \"Select an option\";\n        /**\n         * If `true`, the readonly state will be set.\n         */\n        this.readonly = false;\n        /**\n         * If `true`, the select will require a value.\n         */\n        this.required = false;\n        /**\n         * If `true`, a searchable variant of the select will be displayed which can be typed in to filter options. This functionality is only available on the single-select variant of the select component.\n         */\n        this.searchable = false;\n        /**\n         * Whether the search string of the searchable select should match the start of or anywhere in the options. Only applies to built in filtering.\n         */\n        this.searchMatchPosition = \"anywhere\";\n        /**\n         * If `true`, the icOptionSelect event will be fired on enter instead of ArrowUp and ArrowDown on the single select.\n         */\n        this.selectOnEnter = false;\n        /**\n         * If `true`, a button which clears the select input when clicked will be displayed. The button will always appear on the searchable select.\n         */\n        this.showClearButton = false;\n        /**\n         * The size of the select.\n         */\n        this.size = \"medium\";\n        /**\n         * Sets the theme color to the dark or light theme color. \"inherit\" will set the color based on the system settings or ic-theme component.\n         */\n        this.theme = \"inherit\";\n        /**\n         * The validation status - e.g. 'error' | 'warning' | 'success'.\n         */\n        this.validationStatus = \"\";\n        /**\n         * The text to display as the validation message.\n         */\n        this.validationText = \"\";\n        /**\n         * If `true`, the loading state will be triggered when fetching options asynchronously.\n         */\n        this.loading = false;\n        /**\n         * The possible selection options.\n         */\n        this.options = [];\n        this.filteredOptions = this.options;\n        this.uniqueOptions = this.options;\n        /**\n         * The amount of time, in milliseconds, to wait to trigger the `icInput` event after each keystroke.\n         */\n        this.debounce = 0;\n        this.currDebounce = this.debounce;\n        /**\n         * The value of the select, reflected by the value of the currently selected option.\n         * For the searchable variant, the value is also reflected by the user input.\n         * For the multi-select variant, the value must be an array of option values.\n         */\n        this.value = null;\n        this.initialValue = this.value;\n        this.inputValueToFilter = this.value;\n        // triggered when attributes of host element change\n        this.hostMutationCallback = (mutationList) => {\n            let forceComponentUpdate = false;\n            mutationList.forEach(({ attributeName, type, addedNodes, removedNodes }) => {\n                if (attributeName) {\n                    const attribute = this.el.getAttribute(attributeName);\n                    if (attribute && MUTABLE_ATTRIBUTES.includes(attributeName)) {\n                        this.inheritedAttributes[attributeName] = attribute;\n                        forceComponentUpdate = true;\n                    }\n                }\n                else if (type === \"childList\") {\n                    forceComponentUpdate = (0,_helpers_56631aa0_js__WEBPACK_IMPORTED_MODULE_1__.H)(addedNodes, removedNodes, \"icon\");\n                }\n            });\n            if (forceComponentUpdate) {\n                (0,_index_a7a720e7_js__WEBPACK_IMPORTED_MODULE_0__.f)(this);\n            }\n        };\n        this.handleRetry = (ev) => {\n            var _a;\n            if (ev.detail.keyPressed)\n                (_a = this.searchableSelectElement) === null || _a === void 0 ? void 0 : _a.focus();\n            this.blurredBecauseButtonPressed = true;\n            this.retryButtonClick = true;\n            this.hasSetDefaultValue = true;\n            this.icRetryLoad.emit({\n                value: this.searchable\n                    ? this.searchableSelectInputValue\n                    : this.hiddenInputValue,\n            });\n        };\n        this.emitIcChange = (value) => {\n            // If \"Select all\" button clicked, replace value with new value (array of all option values)\n            if (this.multiple && !Array.isArray(value) && value !== null) {\n                // Update selected options - adds / removes them, in order of option list\n                // Create new array if value prop is undefined\n                if (this.value) {\n                    let valueArray = this.value.slice();\n                    if (this.value.includes(value)) {\n                        valueArray.splice(valueArray.indexOf(value), 1);\n                    }\n                    else {\n                        valueArray.push(value);\n                        valueArray = this.getValueSortedByOptions(valueArray);\n                    }\n                    this.value = valueArray.length === 0 ? null : valueArray;\n                }\n                else {\n                    this.value = [value];\n                }\n            }\n            else {\n                this.value = value;\n            }\n            this.icChange.emit({ value: this.multiple ? this.value : value });\n        };\n        this.emitIcInput = (value) => {\n            clearTimeout(this.debounceIcInput);\n            this.debounceIcInput = window.setTimeout(() => this.icInput.emit({ value }), this.currDebounce);\n        };\n        this.setOptions = () => {\n            if (!this.hasTimedOut && this.options !== this.noOptions) {\n                this.loading = false;\n                clearTimeout(this.timeoutTimer);\n                if (this.options.length > 0) {\n                    this.setOptionsValuesFromLabels();\n                    this.uniqueOptions = this.deduplicateOptions(this.options);\n                }\n                else {\n                    this.noOptions = [{ label: this.emptyOptionListText, value: \"\" }];\n                    this.uniqueOptions = this.noOptions;\n                }\n                this.filteredOptions = this.uniqueOptions;\n                if (this.isExternalFiltering()) {\n                    // When searchable select\n                    this.noOptions = null;\n                    this.updateSearchableSelectResultAriaLive();\n                    this.setDefaultValue();\n                }\n                else if (this.initialOptionsEmpty) {\n                    this.setDefaultValue();\n                    this.initialOptionsEmpty = false;\n                }\n            }\n            else if (!this.searchable) {\n                this.options = this.noOptions || [];\n            }\n        };\n        /**\n         * Processes the provided array of IcMenuOptions, removing duplicates and reporting them with a console.warn\n         * @param options array of IcMenuOptions\n         * @returns a new options object, with all entries possessing a duplicate 'value' field removed\n         */\n        this.deduplicateOptions = (options) => {\n            const uniqueValues = [];\n            const dedupedOptions = [];\n            options.forEach((option) => {\n                if (option.children) {\n                    //If an option has children, we will loop through them\n                    const dedupedChildren = [];\n                    option.children.forEach((child) => {\n                        if (uniqueValues.includes(child.value)) {\n                            console.warn(`ic-select with label ${this.label} was populated with duplicate option (value: ${child.value}) which has been removed.`);\n                        }\n                        else {\n                            uniqueValues.push(child.value);\n                            dedupedChildren.push(child);\n                        }\n                    });\n                    // construct a modified option, inserting the deduplicated children alongside the original information\n                    dedupedOptions.push(Object.assign(Object.assign({}, option), { children: dedupedChildren }));\n                }\n                else {\n                    // If an option does not have children, assess to see if it's value has been included already\n                    if (uniqueValues.includes(option.value)) {\n                        console.warn(`ic-select with label ${this.label} was populated with duplicate option (value: ${option.value}) which has been removed.`);\n                    }\n                    else {\n                        uniqueValues.push(option.value);\n                        dedupedOptions.push(option);\n                    }\n                }\n            });\n            return dedupedOptions;\n        };\n        /**\n         * Loop through options array and for all options with no value, infer it from the label\n         */\n        this.setOptionsValuesFromLabels = () => {\n            if (this.options.length > 0) {\n                this.options.map((option) => {\n                    if (!option.value) {\n                        option.value = option.label;\n                    }\n                });\n            }\n        };\n        this.setUngroupedOptions = (event) => {\n            this.ungroupedOptions = event.detail.options;\n        };\n        this.setTextColor = () => {\n            if (this.nativeSelectElement) {\n                this.nativeSelectElement.className =\n                    this.nativeSelectElement.selectedIndex === 0\n                        ? \"placeholder\"\n                        : \"select-option-selected\";\n            }\n        };\n        this.setMenuChange = (open) => {\n            if (this.open !== open) {\n                this.open = open;\n            }\n        };\n        this.getLabelFromValue = (value) => (0,_helpers_56631aa0_js__WEBPACK_IMPORTED_MODULE_1__.E)(value, this.uniqueOptions);\n        this.getMultipleOptionsString = (selectedValues) => selectedValues === null || selectedValues === void 0 ? void 0 : selectedValues.map((value) => this.getLabelFromValue(value)).filter((label) => !!label).join(\", \");\n        this.getFilteredChildMenuOptions = (option) => (Object.assign(Object.assign({}, option), { children: option.children &&\n                (0,_helpers_56631aa0_js__WEBPACK_IMPORTED_MODULE_1__.C)(option.children, this.searchable && !!this.includeDescriptionsInSearch, this.searchable\n                    ? this.searchableSelectInputValue || \"\"\n                    : this.pressedCharacters, this.searchable ? this.searchMatchPosition : \"start\") }));\n        // (For multi-select) get value array, i.e. selected option values, in order they appear in option list\n        this.getValueSortedByOptions = (value) => {\n            const valueArray = value;\n            const valuesFromAllOptions = this.ungroupedOptions.map((option) => option.value);\n            valueArray.sort((a, b) => valuesFromAllOptions.indexOf(a) - valuesFromAllOptions.indexOf(b));\n            return valueArray;\n        };\n        this.handleNativeSelectChange = () => {\n            if (this.nativeSelectElement) {\n                this.icOptionSelect.emit({ value: this.nativeSelectElement.value });\n                this.emitIcChange(this.nativeSelectElement.value);\n            }\n            this.setTextColor();\n        };\n        // Handle option select for when a custom input box and menu is rendered\n        // (rather than native <select> - rendered when viewed on a mobile / tablet screen)\n        this.handleCustomSelectChange = (event) => {\n            var _a, _b;\n            const { value, label, optionId } = event.detail;\n            if (label === this.emptyOptionListText) {\n                (_a = this.searchableSelectElement) === null || _a === void 0 ? void 0 : _a.focus();\n                return;\n            }\n            if (this.searchable) {\n                this.value = value || null;\n                this.searchableMenuItemSelected = true;\n                // After editing the input, if selecting the same option as before, set the input value to label again\n                if (this.value === this.currValue) {\n                    this.searchableSelectInputValue =\n                        this.getLabelFromValue(this.value) || null;\n                }\n                this.inputValueToFilter = null;\n                this.hiddenInputValue =\n                    this.getValueFromLabel(this.searchableSelectInputValue) || null;\n            }\n            if (value) {\n                if (this.multiple && ((_b = this.value) === null || _b === void 0 ? void 0 : _b.includes(value))) {\n                    this.icOptionDeselect.emit({ value });\n                }\n                else {\n                    this.icOptionSelect.emit({ value });\n                }\n            }\n            this.ariaActiveDescendant = optionId;\n            this.emitIcChange(value || null);\n        };\n        this.handleSelectAllChange = ({ detail, }) => {\n            const allValues = this.ungroupedOptions\n                .filter((option) => !option.disabled)\n                .map((option) => option.value);\n            if (detail.select) {\n                // Only emit icOptionSelect for all values that are newly selected\n                const unselectedValues = this.value\n                    ? allValues.filter((value) => this.value && !this.value.includes(value))\n                    : allValues;\n                unselectedValues.forEach((value) => this.icOptionSelect.emit({ value }));\n            }\n            else {\n                // Only emit icOptionDeselect for values that were selected\n                this.value.forEach((value) => this.icOptionDeselect.emit({ value }));\n            }\n            this.emitIcChange(detail.select ? allValues : null);\n        };\n        this.handleMenuChange = (event) => {\n            this.open = event.detail.open;\n            this.pressedCharacters = \"\";\n            if (this.searchable)\n                this.handleFocusIndicatorDisplay();\n        };\n        // clears the debounce delay when navigating the menu with arrow keys etc\n        // to prevent delay in change event, which should only occur when typing in input\n        this.handleMenuKeyPress = (ev) => {\n            ev.cancelBubble = true;\n            if (!this.multiple) {\n                this.handleCharacterKeyDown(ev.detail.key);\n            }\n        };\n        this.handleFocusIndicatorDisplay = () => {\n            var _a;\n            const focusIndicator = (_a = this.el.shadowRoot) === null || _a === void 0 ? void 0 : _a.querySelector(\".focus-indicator\");\n            if (focusIndicator) {\n                if (this.open) {\n                    focusIndicator.classList.add(\"focus-indicator-enabled\");\n                }\n                else {\n                    focusIndicator.classList.remove(\"focus-indicator-enabled\");\n                }\n            }\n        };\n        this.handleMouseDown = (event) => {\n            if (!this.open) {\n                event.preventDefault();\n            }\n        };\n        this.isExternalFiltering = () => this.searchable && !!this.disableAutoFiltering;\n        this.handleClick = (event) => {\n            var _a, _b;\n            if (!this.open && this.menu) {\n                if (this.isExternalFiltering()) {\n                    this.menu.options = this.filteredOptions;\n                }\n                else if (!this.hasTimedOut &&\n                    !this.loading &&\n                    !((_a = this.noOptions) === null || _a === void 0 ? void 0 : _a.length) &&\n                    (!this.searchable || this.searchableMenuItemSelected)) {\n                    this.noOptions = null;\n                    this.menu.options = this.uniqueOptions;\n                }\n            }\n            if (event.detail !== 0) {\n                (_b = this.menu) === null || _b === void 0 ? void 0 : _b.handleClickOpen();\n            }\n        };\n        this.handleExpandIconMouseDown = (event) => {\n            var _a;\n            if (!this.disabled) {\n                event.preventDefault();\n                (_a = this.searchableSelectElement) === null || _a === void 0 ? void 0 : _a.focus();\n                this.handleClick(event);\n            }\n        };\n        this.handleClear = (event) => {\n            var _a, _b;\n            event.stopPropagation();\n            this.hasTimedOut = false;\n            clearTimeout(this.timeoutTimer);\n            this.clearInput();\n            this.emitIcChange(null);\n            this.icClear.emit();\n            if (this.searchable) {\n                this.hiddenInputValue = null;\n                (_a = this.searchableSelectElement) === null || _a === void 0 ? void 0 : _a.focus();\n            }\n            else {\n                (_b = this.customSelectElement) === null || _b === void 0 ? void 0 : _b.focus();\n            }\n        };\n        this.handleCharacterKeyDown = (key) => {\n            // Only close menu when space is pressed if not being used alongside character keys to quickly select options\n            if (this.open && key === \" \" && this.pressedCharacters.length === 0) {\n                this.setMenuChange(false);\n            }\n            if (key.length !== 1 || this.searchable) {\n                this.pressedCharacters = \"\";\n                return;\n            }\n            window.clearTimeout(this.characterKeyPressTimer);\n            this.characterKeyPressTimer = window.setTimeout(() => (this.pressedCharacters = \"\"), 1000);\n            if (key !== \" \" || !!this.pressedCharacters) {\n                this.pressedCharacters += key;\n                this.handleFilter();\n                if (!this.noOptions) {\n                    this.emitIcChange(this.filteredOptions[0].value);\n                }\n            }\n        };\n        this.handleNativeSelectKeyDown = (event) => {\n            if ((event.key !== \"Escape\" && event.key !== \"Tab\") || this.open) {\n                event.cancelBubble = true;\n            }\n            this.handleCharacterKeyDown(event.key);\n        };\n        this.handleKeyDown = (event) => {\n            var _a;\n            if ((event.key !== \"Escape\" && event.key !== \"Tab\") || this.open) {\n                event.cancelBubble = true;\n            }\n            const isArrowKey = event.key === \"ArrowDown\" || event.key === \"ArrowUp\";\n            if (this.menu && !this.open) {\n                if (this.isExternalFiltering() && (event.key === \"Enter\" || isArrowKey)) {\n                    this.menu.options = this.filteredOptions;\n                }\n                else if (!this.hasTimedOut) {\n                    this.noOptions = null;\n                    this.menu.options = this.uniqueOptions;\n                }\n            }\n            if (this.open && event.key === \"Enter\") {\n                this.setMenuChange(false);\n            }\n            else {\n                if (!isArrowKey || this.noOptions === null) {\n                    if (event.key !== \" \" || this.pressedCharacters.length <= 0) {\n                        // Keyboard events get passed onto ic-menu\n                        (_a = this.menu) === null || _a === void 0 ? void 0 : _a.handleKeyboardOpen(event);\n                    }\n                    if (!this.multiple) {\n                        this.handleCharacterKeyDown(event.key);\n                    }\n                }\n            }\n        };\n        this.handleClearButtonFocus = () => {\n            this.clearButtonFocused = true;\n        };\n        this.handleClearButtonBlur = (ev) => {\n            var _a;\n            const retryButton = (_a = this.menu) === null || _a === void 0 ? void 0 : _a.querySelector(\"#retry-button\");\n            if ((!this.searchableSelectElement ||\n                ev.relatedTarget !== this.searchableSelectElement) &&\n                (!retryButton || ev.relatedTarget !== retryButton)) {\n                this.setMenuChange(false);\n                this.handleFocusIndicatorDisplay();\n            }\n            this.clearButtonFocused = false;\n        };\n        this.handleFilter = () => {\n            var _a;\n            const options = this.deduplicateOptions(this.searchable ? [...this.uniqueOptions] : this.ungroupedOptions);\n            const isGrouped = options.some((option) => !!option.children);\n            let newFilteredOptions = [];\n            let menuOptionsFiltered;\n            if (this.searchable) {\n                menuOptionsFiltered = (0,_helpers_56631aa0_js__WEBPACK_IMPORTED_MODULE_1__.C)(options, !!this.includeDescriptionsInSearch, this.inputValueToFilter || \"\", this.searchMatchPosition);\n                this.searchableMenuItemSelected = false;\n            }\n            else {\n                menuOptionsFiltered = (0,_helpers_56631aa0_js__WEBPACK_IMPORTED_MODULE_1__.C)(options, false, this.pressedCharacters, \"start\");\n            }\n            if (!isGrouped &&\n                ((_a = menuOptionsFiltered[0]) === null || _a === void 0 ? void 0 : _a.label) !== this.emptyOptionListText) {\n                newFilteredOptions = menuOptionsFiltered;\n            }\n            else if (isGrouped) {\n                newFilteredOptions = options.map((option) => this.includeGroupTitlesInSearch &&\n                    menuOptionsFiltered.indexOf(option) !== -1\n                    ? option\n                    : this.getFilteredChildMenuOptions(option));\n            }\n            if (newFilteredOptions.length > 0 &&\n                (!isGrouped ||\n                    newFilteredOptions.some(({ children }) => children && children.length > 0))) {\n                this.noOptions = null;\n                this.filteredOptions = newFilteredOptions;\n            }\n            else {\n                this.noOptions = [{ label: this.emptyOptionListText, value: \"\" }];\n                this.filteredOptions = this.noOptions;\n            }\n        };\n        /**\n         * Put the select component into loading state.\n         * Replace options with the loading message. If timeout is enabled, set the timeout and once passed, replace options with the loading error message\n         */\n        this.triggerLoading = () => {\n            this.hasTimedOut = false;\n            this.noOptions = [{ label: this.loadingLabel, value: \"\", loading: true }];\n            if (this.filteredOptions !== this.noOptions && this.searchable) {\n                this.filteredOptions = this.noOptions;\n            }\n            else if (this.uniqueOptions !== this.noOptions && !this.searchable) {\n                this.uniqueOptions = this.noOptions;\n            }\n            if (this.timeout) {\n                this.timeoutTimer = window.setTimeout(() => {\n                    this.loading = false;\n                    this.hasTimedOut = true;\n                    this.noOptions = [\n                        { label: this.loadingErrorLabel, value: \"\", timedOut: true },\n                    ];\n                    this.filteredOptions = this.noOptions;\n                    if (!this.searchable)\n                        this.uniqueOptions = this.noOptions;\n                }, this.timeout);\n            }\n        };\n        this.getValueFromLabel = (label) => { var _a; return label && ((_a = this.uniqueOptions.find((option) => option.label === label)) === null || _a === void 0 ? void 0 : _a.value); };\n        this.handleSearchableSelectInput = (event) => {\n            this.searchableSelectInputValue = event.target.value;\n            this.emitIcInput(this.searchableSelectInputValue);\n            // De-select previous selection when input is edited\n            // Only emit icChange once when editing input\n            if (this.value != null) {\n                this.emitIcChange(null);\n            }\n            this.hiddenInputValue = null;\n            this.inputValueToFilter = this.searchableSelectInputValue;\n            this.setMenuChange(true);\n            if (!this.disableAutoFiltering) {\n                this.handleFilter();\n                clearTimeout(this.debounceAria);\n                window.setTimeout(() => {\n                    this.updateSearchableSelectResultAriaLive();\n                }, 800);\n            }\n        };\n        this.updateSearchableSelectResultAriaLive = () => {\n            var _a;\n            const searchableSelectResultsStatusEl = (_a = this.el.shadowRoot) === null || _a === void 0 ? void 0 : _a.querySelector(\".searchable-select-results-status\");\n            if (searchableSelectResultsStatusEl) {\n                searchableSelectResultsStatusEl.innerText =\n                    this.noOptions !== null ? this.emptyOptionListText : \"\";\n            }\n        };\n        this.updateMultiSelectedCountAriaLive = () => {\n            var _a, _b;\n            const multiSelectSelectedCountEl = (_a = this.el.shadowRoot) === null || _a === void 0 ? void 0 : _a.querySelector(\".multi-select-selected-count\");\n            const selectedCount = `${(_b = this.currValue) === null || _b === void 0 ? void 0 : _b.length} of ${(0,_helpers_56631aa0_js__WEBPACK_IMPORTED_MODULE_1__.J)(this.options)} selected`;\n            if (multiSelectSelectedCountEl &&\n                multiSelectSelectedCountEl.innerText !== selectedCount) {\n                multiSelectSelectedCountEl.innerText = selectedCount;\n            }\n        };\n        this.getDefaultValue = (value) => this.getLabelFromValue(value) || null;\n        this.setDefaultValue = () => {\n            if (!this.hasSetDefaultValue && this.currValue) {\n                this.searchableSelectInputValue = this.searchable\n                    ? this.getDefaultValue(this.currValue)\n                    : null;\n                this.initialValue = this.currValue;\n                this.hasSetDefaultValue = true;\n            }\n        };\n        this.onFocus = () => {\n            this.icFocus.emit();\n        };\n        this.onBlur = ({ relatedTarget }) => {\n            var _a;\n            const target = relatedTarget;\n            if (target !== null &&\n                ((target.tagName === \"UL\" && target.className.includes(\"menu\")) ||\n                    (target.tagName === \"LI\" && target.className.includes(\"option\")))) {\n                return;\n            }\n            const retryButton = (_a = this.menu) === null || _a === void 0 ? void 0 : _a.querySelector(\"#retry-button\");\n            if (this.searchable &&\n                !!this.menu &&\n                target !== this.menu &&\n                !Array.from(this.menu.querySelectorAll(\"[role='option']\")).includes(target) &&\n                (!this.clearButton || target !== this.clearButton) &&\n                (!retryButton || target !== retryButton)) {\n                if (!this.retryButtonClick) {\n                    this.setMenuChange(false);\n                    // Clear input field on blur when searchable if no option is selected\n                    if (!this.value) {\n                        this.clearInput();\n                    }\n                }\n                this.handleFocusIndicatorDisplay();\n            }\n            this.retryButtonClick = false;\n            this.icBlur.emit();\n        };\n        this.onTimeoutBlur = (ev) => {\n            if (ev.detail.ev.relatedTarget !==\n                this.searchableSelectElement &&\n                !this.blurredBecauseButtonPressed) {\n                this.setMenuChange(false);\n                this.handleFocusIndicatorDisplay();\n                this.icBlur.emit();\n            }\n            this.blurredBecauseButtonPressed = false;\n        };\n        this.handleFormReset = () => {\n            this.value = this.initialValue;\n            if (this.searchable) {\n                this.searchableSelectInputValue = this.getDefaultValue(this.value);\n                this.hiddenInputValue = this.value;\n            }\n        };\n        this.clearInput = () => {\n            var _a;\n            this.noOptions = null;\n            if (this.searchable) {\n                (_a = this.searchableSelectElement) === null || _a === void 0 ? void 0 : _a.setAttribute(\"value\", \"\");\n                this.searchableSelectInputValue = null;\n                this.filteredOptions = this.uniqueOptions;\n            }\n        };\n        this.renderNativeOption = (option) => ((0,_index_a7a720e7_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"option\", { value: option.value, disabled: option.disabled, selected: option.value === this.currValue }, option.label));\n    }\n    watchDisabledHandler() {\n        (0,_helpers_56631aa0_js__WEBPACK_IMPORTED_MODULE_1__.r)(this.disabled, this.el);\n    }\n    loadingHandler(newValue) {\n        newValue ? this.triggerLoading() : this.setOptions();\n    }\n    watchOptionsHandler() {\n        this.setOptions();\n    }\n    debounceChangedHandler(newValue) {\n        if (this.currDebounce !== newValue) {\n            this.currDebounce = newValue;\n        }\n    }\n    valueChangedHandler() {\n        if (this.value !== this.currValue) {\n            if (this.value && this.multiple) {\n                this.currValue = this.getMultipleOptionsString(this.value)\n                    ? this.getValueSortedByOptions(this.value)\n                    : null;\n                this.updateMultiSelectedCountAriaLive();\n            }\n            else {\n                this.currValue = this.getLabelFromValue(this.value)\n                    ? this.value\n                    : null;\n            }\n        }\n        if (this.searchable && this.value) {\n            // Only set if value not null - prevents whole input value being cleared when edited\n            this.searchableSelectInputValue =\n                this.getLabelFromValue(String(this.currValue)) || null;\n        }\n    }\n    openChangedHandler() {\n        this.open ? this.icOpen.emit() : this.icClose.emit();\n    }\n    disconnectedCallback() {\n        var _a;\n        (0,_helpers_56631aa0_js__WEBPACK_IMPORTED_MODULE_1__.l)(this.el, this.handleFormReset);\n        (_a = this.hostMutationObserver) === null || _a === void 0 ? void 0 : _a.disconnect();\n    }\n    componentWillLoad() {\n        const valueInOptions = this.multiple\n            ? this.getMultipleOptionsString(this.value)\n            : this.getLabelFromValue(this.value);\n        this.currValue = valueInOptions ? this.value : null;\n        this.inheritedAttributes = (0,_helpers_56631aa0_js__WEBPACK_IMPORTED_MODULE_1__.x)(this.el, MUTABLE_ATTRIBUTES);\n        (0,_helpers_56631aa0_js__WEBPACK_IMPORTED_MODULE_1__.r)(this.disabled, this.el);\n        this.setOptionsValuesFromLabels();\n        (0,_helpers_56631aa0_js__WEBPACK_IMPORTED_MODULE_1__.k)(this.el, this.handleFormReset);\n        if (!this.options.length) {\n            this.initialOptionsEmpty = true;\n            this.noOptions = [{ label: this.emptyOptionListText, value: \"\" }];\n            this.uniqueOptions = this.noOptions;\n            this.filteredOptions = this.noOptions;\n        }\n        else {\n            this.setDefaultValue();\n            this.uniqueOptions = this.deduplicateOptions(this.options);\n        }\n    }\n    componentDidLoad() {\n        (0,_helpers_56631aa0_js__WEBPACK_IMPORTED_MODULE_1__.o)([{ prop: this.label, propName: \"label\" }], \"Select\");\n        if (this.loading) {\n            this.triggerLoading();\n        }\n        if (this.searchable) {\n            this.hiddenInputValue = this.currValue;\n        }\n        this.hostMutationObserver = new MutationObserver(this.hostMutationCallback);\n        this.hostMutationObserver.observe(this.el, {\n            attributes: true,\n            childList: true,\n        });\n    }\n    componentDidRender() {\n        if (this.nativeSelectElement && !this.disabled) {\n            this.setTextColor();\n        }\n    }\n    /**\n     * Sets focus on the input box.\n     */\n    async setFocus() {\n        if (this.nativeSelectElement) {\n            this.nativeSelectElement.focus();\n        }\n        else if (this.customSelectElement) {\n            this.customSelectElement.focus();\n        }\n        else if (this.searchableSelectElement) {\n            this.searchableSelectElement.focus();\n        }\n    }\n    render() {\n        var _a;\n        const { size, disabled, fullWidth, helperText, hideLabel, label, menuId, multiple, name, options, placeholder, readonly, required, searchable, showClearButton, validationStatus, validationText, currValue, theme, hiddenInputValue, open, inputId, searchableSelectInputValue, loading, value, emptyOptionListText, uniqueOptions, selectOnEnter, form, inheritedAttributes, ariaActiveDescendant, hasTimedOut, noOptions, filteredOptions, clearButtonFocused, } = this;\n        // HTML inputs only accept 'string' for their value\n        // Does not cause errors when it is a multi-select - sets value correctly, to a comma-separated string\n        (0,_helpers_56631aa0_js__WEBPACK_IMPORTED_MODULE_1__.m)(this.el, searchable ? hiddenInputValue : currValue, name || inputId, disabled);\n        const invalid = `${validationStatus === _helpers_56631aa0_js__WEBPACK_IMPORTED_MODULE_1__.L.Error}`;\n        const describedBy = (0,_helpers_56631aa0_js__WEBPACK_IMPORTED_MODULE_1__.q)(this.el, inputId, helperText !== \"\", (0,_helpers_56631aa0_js__WEBPACK_IMPORTED_MODULE_1__.s)(validationStatus, !!disabled)).trim();\n        const valueLabelString = multiple\n            ? this.getMultipleOptionsString(currValue)\n            : this.getLabelFromValue(currValue);\n        const isClearable = !disabled &&\n            (searchable\n                ? !!searchableSelectInputValue\n                : !!currValue && !loading && showClearButton);\n        return ((0,_index_a7a720e7_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_a7a720e7_js__WEBPACK_IMPORTED_MODULE_0__.H, { key: '7b99a667632c04cccbe465f90c4f5a9436ed04e2', class: {\n                \"ic-select-disabled\": disabled,\n                \"ic-select-searchable\": searchable,\n                [`ic-select-${size}`]: size !== \"medium\",\n                \"ic-select-full-width\": fullWidth,\n                [`ic-theme-${theme}`]: theme !== \"inherit\",\n            }, onBlur: this.onBlur }, (0,_index_a7a720e7_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"ic-input-container\", { key: 'be3746b8ac59d37562999157b5b70fbc5fb6cc18', readonly: readonly }, !hideLabel && ((0,_index_a7a720e7_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"ic-input-label\", { key: 'ccb2417565197ba5d71ce4ed25c2951a042bdcab', for: inputId, label: label, helperText: helperText, required: required, disabled: disabled, readonly: readonly }, (0,_index_a7a720e7_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"slot\", { key: 'eec64f5e410f4bbdfbea7afd23f8fd3bc4592429', name: \"helper-text\", slot: \"helper-text\" }))), (0,_index_a7a720e7_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"ic-input-component-container\", { key: '1b059596836c96987edadd6b0ec5a46c057e5fb6', ref: (el) => (this.anchorEl = el), class: { \"menu-open\": open }, size: size, fullWidth: fullWidth, disabled: disabled, readonly: readonly, validationStatus: validationStatus }, (0,_helpers_56631aa0_js__WEBPACK_IMPORTED_MODULE_1__.i)(this.el, \"icon\") &&\n            !disabled &&\n            (!readonly || !!value) && ((0,_index_a7a720e7_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"span\", { key: '594527db6666a07c89038b173b1abd7e4191efc5', slot: \"left-icon\", class: {\n                readonly,\n                \"has-value\": !!value,\n            } }, (0,_index_a7a720e7_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"slot\", { key: '5b982f545b7a35f2a2b16ca15278de2c6decfd00', name: \"icon\" }))), readonly ? ((0,_index_a7a720e7_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"ic-typography\", null, (0,_index_a7a720e7_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"p\", null, valueLabelString))) : (0,_helpers_56631aa0_js__WEBPACK_IMPORTED_MODULE_1__.K)() && !multiple ? ((0,_index_a7a720e7_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"select\", Object.assign({ ref: (el) => (this.nativeSelectElement = el), disabled: disabled, onChange: this.handleNativeSelectChange, required: required, id: inputId, \"aria-label\": label, \"aria-describedby\": describedBy, \"aria-invalid\": invalid, onBlur: this.onBlur, onFocus: this.onFocus, onKeyDown: this.handleNativeSelectKeyDown, form: form }, inheritedAttributes), (0,_index_a7a720e7_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"option\", { value: \"\", selected: true, disabled: !showClearButton }, placeholder), options.map((option) => option.children ? ((0,_index_a7a720e7_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"optgroup\", { label: option.label }, option.children.map((child) => this.renderNativeOption(child)))) : (this.renderNativeOption(option))))) : searchable ? ((0,_index_a7a720e7_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"div\", { class: \"searchable-select-container\" }, (0,_index_a7a720e7_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"input\", { class: {\n                \"select-input\": true,\n                \"with-clear-button\": !!searchableSelectInputValue,\n            }, role: \"combobox\", autocomplete: \"off\", \"aria-label\": label, \"aria-describedby\": describedBy, \"aria-activedescendant\": ariaActiveDescendant, \"aria-autocomplete\": \"list\", \"aria-expanded\": `${open}`, \"aria-invalid\": invalid, \"aria-required\": `${required}`, \"aria-controls\": menuId, ref: (el) => (this.searchableSelectElement = el), id: inputId, value: searchableSelectInputValue || undefined, placeholder: placeholder, disabled: disabled, onInput: this.handleSearchableSelectInput, onClick: this.handleClick, onKeyDown: this.handleKeyDown, onFocus: this.onFocus, onBlur: this.onBlur, form: form }), isClearable && ((0,_index_a7a720e7_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"div\", { class: \"clear-button-container\" }, (0,_index_a7a720e7_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"ic-button\", { id: \"clear-button\", ref: (el) => (this.clearButton = el), \"aria-label\": searchableSelectInputValue &&\n                (currValue === null || loading)\n                ? \"Clear input\"\n                : \"Clear selection\", class: \"clear-button\", innerHTML: Clear, onClick: this.handleClear, onFocus: this.handleClearButtonFocus, onBlur: this.handleClearButtonBlur, size: size, variant: \"icon\", theme: clearButtonFocused ? \"light\" : \"dark\" }), (0,_index_a7a720e7_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"div\", { class: \"divider\" }))), (0,_index_a7a720e7_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"span\", { onMouseDown: this.handleExpandIconMouseDown, class: {\n                \"expand-icon\": true,\n                \"expand-icon-open\": open,\n            }, innerHTML: Expand, \"aria-hidden\": \"true\" }), (0,_index_a7a720e7_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"div\", { \"aria-live\": \"polite\", role: \"status\", class: \"searchable-select-results-status\" }))) : ((0,_index_a7a720e7_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"div\", { class: \"select-container\" }, (0,_index_a7a720e7_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"button\", { class: \"select-input\", ref: (el) => (this.customSelectElement = el), id: inputId, \"aria-label\": `${label}, ${(multiple && currValue\n                ? `${currValue.length} of ${(0,_helpers_56631aa0_js__WEBPACK_IMPORTED_MODULE_1__.J)(options)} selected, ${valueLabelString}`\n                : valueLabelString) || placeholder}${required ? \", required\" : \"\"}`, \"aria-describedby\": describedBy, \"aria-invalid\": invalid, \"aria-haspopup\": \"listbox\", \"aria-expanded\": `${open}`, \"aria-owns\": menuId, \"aria-controls\": menuId, disabled: disabled, onBlur: this.onBlur, onFocus: this.onFocus, onClick: this.handleClick, onMouseDown: this.handleMouseDown, onKeyDown: this.handleKeyDown }, (0,_index_a7a720e7_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"ic-typography\", { variant: \"body\", class: {\n                \"value-text\": true,\n                \"with-clear-button\": isClearable,\n                placeholder: !loading && multiple\n                    ? !value || value.length < 1\n                    : !this.getLabelFromValue(currValue),\n            } }, valueLabelString || placeholder), (0,_index_a7a720e7_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"div\", { class: \"select-input-end\" }, isClearable && (0,_index_a7a720e7_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"div\", { class: \"divider\" }), (0,_index_a7a720e7_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"span\", { class: {\n                \"expand-icon\": true,\n                \"expand-icon-open\": open,\n            }, innerHTML: Expand, \"aria-hidden\": \"true\" }))), isClearable && ((0,_index_a7a720e7_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"ic-button\", { id: \"clear-button\", \"aria-label\": \"Clear selection\", class: \"clear-button\", innerHTML: Clear, onClick: this.handleClear, onFocus: this.handleClearButtonFocus, onBlur: this.handleClearButtonBlur, size: size, variant: \"icon\", theme: clearButtonFocused ? \"light\" : \"dark\" }))))), (!(0,_helpers_56631aa0_js__WEBPACK_IMPORTED_MODULE_1__.K)() || multiple) && ((0,_index_a7a720e7_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"ic-menu\", { key: '841eb3f04181992c0b00b033d19fe3650544c0ad', class: {\n                \"no-results\": loading ||\n                    hasTimedOut ||\n                    ((_a = noOptions === null || noOptions === void 0 ? void 0 : noOptions[0]) === null || _a === void 0 ? void 0 : _a.label) === emptyOptionListText,\n            }, ref: (el) => (this.menu = el), inputEl: searchable\n                ? this.searchableSelectElement\n                : this.customSelectElement, inputLabel: label, anchorEl: this.anchorEl, size: size, menuId: menuId, open: open, options: searchable ? filteredOptions : uniqueOptions, value: multiple ? currValue : currValue, fullWidth: fullWidth, selectOnEnter: selectOnEnter, onMenuStateChange: this.handleMenuChange, onMenuOptionSelect: this.handleCustomSelectChange, onMenuOptionSelectAll: this.handleSelectAllChange, onMenuKeyPress: this.handleMenuKeyPress, onUngroupedOptionsSet: this.setUngroupedOptions, onRetryButtonClicked: this.handleRetry, parentEl: this.el, onTimeoutBlur: this.onTimeoutBlur, activationType: searchable || multiple || selectOnEnter ? \"manual\" : \"automatic\", closeOnSelect: !multiple, multiSelect: multiple ? true : false, searchableSelect: searchable ? true : false })), multiple && ((0,_index_a7a720e7_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"div\", { key: 'fecc09136ac127471d4f70ba69d3a26ba0a0a602', \"aria-live\": \"polite\", role: \"status\", class: \"multi-select-selected-count\" })), (0,_helpers_56631aa0_js__WEBPACK_IMPORTED_MODULE_1__.s)(validationStatus, disabled) && ((0,_index_a7a720e7_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"ic-input-validation\", { key: 'b03f8b488a2b31686e1fa7150c0a407c3533accf', class: { \"menu-open\": open }, ariaLiveMode: \"polite\", status: validationStatus, message: validationText, for: inputId })))));\n    }\n    static get delegatesFocus() { return true; }\n    get el() { return (0,_index_a7a720e7_js__WEBPACK_IMPORTED_MODULE_0__.g)(this); }\n    static get watchers() { return {\n        \"disabled\": [\"watchDisabledHandler\"],\n        \"loading\": [\"loadingHandler\"],\n        \"options\": [\"watchOptionsHandler\"],\n        \"debounce\": [\"debounceChangedHandler\"],\n        \"value\": [\"valueChangedHandler\"],\n        \"open\": [\"openChangedHandler\"]\n    }; }\n};\nSelect.style = IcSelectStyle0;\n\n\n\n//# sourceMappingURL=ic-select.entry.js.map\n\n//# sourceURL=webpack:///../../../../../../../../node_modules/@ukic/web-components/dist/esm/ic-select.entry.js?\n}");

/***/ })

}]);