"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk"] = self["webpackChunk"] || []).push([["vendors-node_modules_ukic_web-components_dist_esm_helpers-56631aa0_js"],{

/***/ "../../../../../../../../node_modules/@ukic/web-components/dist/esm/helpers-56631aa0.js":
/*!**********************************************************************************************!*\
  !*** ../../../../../../../../node_modules/@ukic/web-components/dist/esm/helpers-56631aa0.js ***!
  \**********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("{__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   $: () => (/* binding */ warningIcon),\n/* harmony export */   A: () => (/* binding */ getNavItemParentDetails),\n/* harmony export */   B: () => (/* binding */ getCssProperty),\n/* harmony export */   C: () => (/* binding */ getFilteredMenuOptions),\n/* harmony export */   D: () => (/* binding */ DEVICE_SIZES),\n/* harmony export */   E: () => (/* binding */ getLabelFromValue),\n/* harmony export */   F: () => (/* binding */ handleHiddenFormButtonClick),\n/* harmony export */   G: () => (/* binding */ debounceEvent),\n/* harmony export */   H: () => (/* binding */ checkSlotInChildMutations),\n/* harmony export */   I: () => (/* binding */ IcBrandForegroundEnum),\n/* harmony export */   J: () => (/* binding */ getOptionsWithoutGroupTitlesCount),\n/* harmony export */   K: () => (/* binding */ isMobileOrTablet),\n/* harmony export */   L: () => (/* binding */ IcInformationStatus),\n/* harmony export */   M: () => (/* binding */ isEmptyString),\n/* harmony export */   N: () => (/* binding */ IGNORED_KEYBOARD_CHARACTERS),\n/* harmony export */   O: () => (/* binding */ getBrandColorBrightness),\n/* harmony export */   P: () => (/* binding */ BLACK_MIN_COLOR_BRIGHTNESS),\n/* harmony export */   Q: () => (/* binding */ getSlot),\n/* harmony export */   R: () => (/* binding */ isSlottedInGroup),\n/* harmony export */   S: () => (/* binding */ getSlotContent),\n/* harmony export */   T: () => (/* binding */ capitalize),\n/* harmony export */   U: () => (/* binding */ successIcon),\n/* harmony export */   V: () => (/* binding */ VARIANT_ICONS),\n/* harmony export */   W: () => (/* binding */ WHITE_MAX_COLOR_BRIGHTNESS),\n/* harmony export */   X: () => (/* binding */ isMacDevice),\n/* harmony export */   Y: () => (/* binding */ elementOverflowsX),\n/* harmony export */   Z: () => (/* binding */ getInputHelperTextID),\n/* harmony export */   _: () => (/* binding */ getInputValidationTextID),\n/* harmony export */   a: () => (/* binding */ renderDynamicChildSlots),\n/* harmony export */   a0: () => (/* binding */ errorIcon),\n/* harmony export */   a1: () => (/* binding */ renderFileHiddenInput),\n/* harmony export */   b: () => (/* binding */ isElInAGGrid),\n/* harmony export */   c: () => (/* binding */ onComponentPropUndefinedChange),\n/* harmony export */   d: () => (/* binding */ convertToRGBA),\n/* harmony export */   e: () => (/* binding */ isPropDefined),\n/* harmony export */   f: () => (/* binding */ getCurrentDeviceSize),\n/* harmony export */   g: () => (/* binding */ getBrandForegroundAppearance),\n/* harmony export */   h: () => (/* binding */ checkResizeObserver),\n/* harmony export */   i: () => (/* binding */ isSlotUsed),\n/* harmony export */   j: () => (/* binding */ getBrandFromContext),\n/* harmony export */   k: () => (/* binding */ addFormResetListener),\n/* harmony export */   l: () => (/* binding */ removeFormResetListener),\n/* harmony export */   m: () => (/* binding */ renderHiddenInput),\n/* harmony export */   n: () => (/* binding */ removeHiddenInput),\n/* harmony export */   o: () => (/* binding */ onComponentRequiredPropUndefined),\n/* harmony export */   p: () => (/* binding */ pxToRem),\n/* harmony export */   q: () => (/* binding */ getInputDescribedByText),\n/* harmony export */   r: () => (/* binding */ removeDisabledFalse),\n/* harmony export */   s: () => (/* binding */ hasValidationStatus),\n/* harmony export */   t: () => (/* binding */ slotHasContent),\n/* harmony export */   u: () => (/* binding */ getSlotElements),\n/* harmony export */   v: () => (/* binding */ IC_DEVICE_SIZES),\n/* harmony export */   w: () => (/* binding */ hasClassificationBanner),\n/* harmony export */   x: () => (/* binding */ inheritAttributes),\n/* harmony export */   y: () => (/* binding */ getElementInheritedTheme),\n/* harmony export */   z: () => (/* binding */ IC_INHERITED_ARIA)\n/* harmony export */ });\n/* harmony import */ var _index_a7a720e7_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index-a7a720e7.js */ \"../../../../../../../../node_modules/@ukic/web-components/dist/esm/index-a7a720e7.js\");\n\n\nvar IcInformationStatus;\n(function (IcInformationStatus) {\n    IcInformationStatus[\"Warning\"] = \"warning\";\n    IcInformationStatus[\"Error\"] = \"error\";\n    IcInformationStatus[\"Success\"] = \"success\";\n})(IcInformationStatus || (IcInformationStatus = {}));\nvar IcBrandForegroundEnum;\n(function (IcBrandForegroundEnum) {\n    IcBrandForegroundEnum[\"Default\"] = \"default\";\n    IcBrandForegroundEnum[\"Dark\"] = \"dark\";\n    IcBrandForegroundEnum[\"Light\"] = \"light\";\n})(IcBrandForegroundEnum || (IcBrandForegroundEnum = {}));\n\nconst errorIcon = `<svg aria-labelledby=\"error-title\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" fill=\"#000000\">\n    <title id=\"error-title\">Error</title>\n    <g id=\"close-octagon\">\n        <path id=\"Vector\" d=\"M8.77 3L3.5 8.27V15.73L8.77 21H16.23L21.5 15.73V8.27L16.23 3M8.91 7L12.5 10.59L16.09 7L17.5 8.41L13.91 12L17.5 15.59L16.09 17L12.5 13.41L8.91 17L7.5 15.59L11.09 12L7.5 8.41\" />\n    </g>\n</svg>\n`;\n\nconst infoIcon = `<svg aria-labelledby=\"info-title\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" fill=\"#000000\">\n    <title id=\"info-title\">For your information</title>\n    <g id=\"info\">\n        <path id=\"Vector\" d=\"M12 2C6.48 2 2 6.48 2 12C2 17.52 6.48 22 12 22C17.52 22 22 17.52 22 12C22 6.48 17.52 2 12 2ZM12 17C11.45 17 11 16.55 11 16V12C11 11.45 11.45 11 12 11C12.55 11 13 11.45 13 12V16C13 16.55 12.55 17 12 17ZM13 9H11V7H13V9Z\" />\n    </g>\n</svg>\n`;\n\nconst neutralIcon = `<svg aria-labelledby=\"neutral-title\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" fill=\"#000000\">\n<title id=\"neutral-title\">Neutral</title>\n    <g id=\"Icon\">\n        <path id=\"Vector\" d=\"M19.5 3H5.5C4.4 3 3.5 3.9 3.5 5V19C3.5 20.1 4.4 21 5.5 21H19.5C20.6 21 21.5 20.1 21.5 19V5C21.5 3.9 20.6 3 19.5 3ZM12.51 18C11.81 18 11.25 17.44 11.25 16.74C11.25 16.03 11.81 15.49 12.51 15.49C13.22 15.49 13.76 16.03 13.76 16.74C13.75 17.43 13.22 18 12.51 18ZM15.52 10.6C14.76 11.71 14.04 12.06 13.65 12.77C13.55 12.95 13.49 13.09 13.46 13.4C13.41 13.85 13.01 14.18 12.56 14.18H12.5C11.98 14.18 11.57 13.74 11.62 13.22C11.65 12.88 11.73 12.53 11.92 12.19C12.41 11.32 13.34 10.8 13.88 10.03C14.45 9.22 14.13 7.7 12.51 7.7C11.8 7.7 11.33 8.06 11.04 8.49C10.79 8.85 10.35 9.02 9.94 8.85C9.41 8.64 9.22 8 9.54 7.54C10.15 6.65 11.17 6 12.49 6C13.97 6 14.98 6.67 15.5 7.52C15.94 8.24 16.2 9.59 15.52 10.6Z\" />\n    </g>\n</svg>\n`;\n\nconst successIcon = `<svg aria-labelledby=\"success-title\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" fill=\"#000000\">\n    <title id=\"success-title\">Success</title>\n    <g id=\"check_circle\">\n        <path id=\"Vector\" d=\"M12.5 2C6.98 2 2.5 6.48 2.5 12C2.5 17.52 6.98 22 12.5 22C18.02 22 22.5 17.52 22.5 12C22.5 6.48 18.02 2 12.5 2ZM9.79 16.29L6.2 12.7C5.81 12.31 5.81 11.68 6.2 11.29C6.59 10.9 7.22 10.9 7.61 11.29L10.5 14.17L17.38 7.29C17.77 6.9 18.4 6.9 18.79 7.29C19.18 7.68 19.18 8.31 18.79 8.7L11.2 16.29C10.82 16.68 10.18 16.68 9.79 16.29Z\" />\n    </g>\n</svg>\n`;\n\nconst warningIcon = `<svg aria-labelledby=\"warning-title\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" fill=\"#000000\">\n    <title id=\"warning-title\">Warning</title>\n    <g id=\"warning\">\n        <path id=\"Vector\" d=\"M4.47 20.5037H19.53C21.07 20.5037 22.03 18.8337 21.26 17.5037L13.73 4.49375C12.96 3.16375 11.04 3.16375 10.27 4.49375L2.74 17.5037C1.97 18.8337 2.93 20.5037 4.47 20.5037ZM12 13.5037C11.45 13.5037 11 13.0537 11 12.5037V10.5037C11 9.95375 11.45 9.50375 12 9.50375C12.55 9.50375 13 9.95375 13 10.5037V12.5037C13 13.0537 12.55 13.5037 12 13.5037ZM13 17.5037H11V15.5037H13V17.5037Z\" />\n    </g>\n</svg>\n`;\n\nconst aiIcon = `<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\">\n  <title id=\"ai-title\">Artificial Intelligence (AI)</title>\n  <g clip-path=\"url(#clip0_43876_12457)\">\n    <path d=\"M19.801 3C20.4637 3 21.001 3.53726 21.001 4.2V19.8C21.001 20.4628 20.4637 21 19.801 21H4.20098C3.53824 21 3.00098 20.4628 3.00098 19.8V4.2C3.00098 3.53726 3.53824 3 4.20098 3H19.801ZM8.94555 8.87988C8.88361 8.87988 8.82803 8.91796 8.80567 8.97573L6.32024 15.3958C6.28219 15.4941 6.35472 15.6 6.46013 15.6H7.19363C7.2559 15.6 7.3117 15.5615 7.33384 15.5033L7.89546 14.0262C7.9176 13.968 7.97339 13.9295 8.03567 13.9295H10.64C10.7023 13.9295 10.7582 13.968 10.7803 14.0263L11.3403 15.5032C11.3624 15.5615 11.4182 15.6 11.4805 15.6H12.2625C12.3678 15.6 12.4403 15.4944 12.4025 15.3962L9.9356 8.97608C9.91333 8.91813 9.85767 8.87988 9.79558 8.87988H8.94555ZM13.6123 8.87988C13.5294 8.87988 13.4623 8.94704 13.4623 9.02988V9.69024C13.4623 9.77308 13.5294 9.84024 13.6123 9.84024H14.3969C14.4797 9.84024 14.5469 9.9074 14.5469 9.99024V14.4902C14.5469 14.5731 14.4797 14.6402 14.3969 14.6402H13.6123C13.5294 14.6402 13.4623 14.7074 13.4623 14.7902V15.45C13.4623 15.5328 13.5294 15.6 13.6123 15.6H16.5186C16.6014 15.6 16.6686 15.5328 16.6686 15.45V14.7902C16.6686 14.7074 16.6014 14.6402 16.5186 14.6402H15.7334C15.6506 14.6402 15.5834 14.5731 15.5834 14.4902V9.99024C15.5834 9.9074 15.6506 9.84024 15.7334 9.84024H16.5186C16.6014 9.84024 16.6686 9.77308 16.6686 9.69024V9.02988C16.6686 8.94704 16.6014 8.87988 16.5186 8.87988H13.6123ZM9.35138 10.0705C9.40898 10.2433 9.47318 10.4353 9.54356 10.6465C9.61394 10.8577 9.6746 11.0497 9.72578 11.2225C9.78338 11.3952 9.82202 11.504 9.84122 11.5488L10.288 12.7279C10.3252 12.8261 10.2527 12.9311 10.1478 12.9311H8.52949C8.42445 12.9311 8.35194 12.8259 8.3893 12.7277L8.82344 11.5869C8.86182 11.4782 8.91003 11.3437 8.96758 11.1838C9.02516 11.0174 9.08288 10.8413 9.14042 10.6559C9.20438 10.4704 9.2615 10.2943 9.31268 10.1279C9.31947 10.1084 9.32604 10.0892 9.3325 10.0705C9.33554 10.0616 9.34853 10.0616 9.35138 10.0705Z\" />\n  </g>\n  <defs>\n    <clipPath id=\"clip0_43876_12457\">\n      <rect width=\"18\" height=\"18\" fill=\"white\" transform=\"translate(3.00098 3)\"/>\n    </clipPath>\n  </defs>\n</svg>`;\n\n// Global status icons\nconst VARIANT_ICONS = {\n    neutral: {\n        icon: neutralIcon,\n        ariaLabel: \"Neutral\",\n    },\n    info: {\n        icon: infoIcon,\n        ariaLabel: \"For your information\",\n    },\n    warning: {\n        icon: warningIcon,\n        ariaLabel: \"Warning\",\n    },\n    error: {\n        icon: errorIcon,\n        ariaLabel: \"Error\",\n    },\n    success: {\n        icon: successIcon,\n        ariaLabel: \"Success\",\n    },\n    ai: {\n        icon: aiIcon,\n        ariaLabel: \"AI\",\n    },\n};\n// Global ARIA attributes\nconst IC_INHERITED_ARIA = [\n    \"aria-atomic\",\n    \"aria-autocomplete\",\n    \"aria-busy\",\n    \"aria-controls\",\n    \"aria-current\",\n    \"aria-describedby\",\n    \"aria-description\",\n    \"aria-details\",\n    \"aria-disabled\",\n    \"aria-dropeffect\",\n    \"aria-errormessage\",\n    \"aria-expanded\",\n    \"aria-flowto\",\n    \"aria-grabbed\",\n    \"aria-haspopup\",\n    \"aria-hidden\",\n    \"aria-invalid\",\n    \"aria-keyshortcuts\",\n    \"aria-label\",\n    \"aria-labelledby\",\n    \"aria-live\",\n    \"aria-owns\",\n    \"aria-relevant\",\n    \"aria-roledescription\",\n];\nconst IC_DEVICE_SIZES = {\n    XS: 576,\n    S: 768,\n    M: 992,\n    L: 1200,\n    XL: 99999,\n};\nconst IC_BLOCK_COLOR_COMPONENTS = [\n    \"ic-hero\",\n    \"ic-top-navigation\",\n    \"ic-footer\",\n    \"ic-side-navigation\",\n    \"ic-alert\",\n].join(\",\");\nconst IC_FIXED_COLOR_COMPONENTS = [\"ic-alert\"];\nconst IC_BLOCK_COLOR_EXCEPTIONS = {\n    \"ic-alert\": [\"ic-link\", \"ic-button\"],\n};\n/* Range within which the chosen theme colour would not have a sufficient brightness difference with either of the black or white foreground colours\n * The brightness difference must be greater than 125 to provide good colour visibility\n * Calculated by:\n * - Using the brightness formula for both colours: https://www.w3.org/TR/AERT/#color-contrast\n * - Adding 125 to the brightness of the black foreground colour - RGB(11, 12, 12)\n * - Subtracting 125 from the brightness of the white foreground colour - RGB(255, 255, 255)\n */\nconst BLACK_MIN_COLOR_BRIGHTNESS = 136.701;\nconst WHITE_MAX_COLOR_BRIGHTNESS = 130;\n// Keyboard characters that do not affect the content of an input control when pressed\nconst IGNORED_KEYBOARD_CHARACTERS = [\n    \"Alt\",\n    \"AltGraph\",\n    \"ArrowDown\",\n    \"ArrowLeft\",\n    \"ArrowRight\",\n    \"ArrowUp\",\n    \"AudioVolumeDown\",\n    \"AudioVolumeMute\",\n    \"AudioVolumeUp\",\n    \"CapsLock\",\n    \"ContextMenu\",\n    \"Control\",\n    \"Delete\",\n    \"End\",\n    \"Enter\",\n    \"Escape\",\n    \"F1\",\n    \"F10\",\n    \"F11\",\n    \"F12\",\n    \"F2\",\n    \"F3\",\n    \"F4\",\n    \"F5\",\n    \"F6\",\n    \"F7\",\n    \"F8\",\n    \"F9\",\n    \"Home\",\n    \"Insert\",\n    \"Meta\",\n    \"NumLock\",\n    \"PageDown\",\n    \"PageUp\",\n    \"Shift\",\n    \"Tab\",\n];\n\nconst DARK_MODE_THRESHOLD = 133.3505;\nconst ANYWHERE_SEARCH_POSITION = \"anywhere\";\nconst icInput = \"ic-input\";\n/**\n * Used to inherit global attributes set on the host. Called in componentWillLoad and assigned\n * to a variable that is later used in the render function.\n *\n * This does not need to be reactive as changing attributes on the host element\n * does not trigger a re-render.\n */\nconst inheritAttributes = (element, attributes = []) => {\n    const attributeObject = {};\n    attributes.forEach((attr) => {\n        const value = element.getAttribute(attr);\n        if (value !== null) {\n            attributeObject[attr] = value;\n            element.removeAttribute(attr);\n        }\n    });\n    return attributeObject;\n};\nconst debounceEvent = (event, wait) => {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const original = event._original || event;\n    return {\n        _original: event,\n        emit: debounce(original.emit.bind(original), wait),\n    };\n};\nconst debounce = (func, wait = 0) => {\n    let timer;\n    return (...args) => {\n        clearTimeout(timer);\n        timer = setTimeout(func, wait, ...args);\n    };\n};\n/**\n * This method is used to add a hidden input to a host element that contains\n * a Shadow DOM. It does not add the input inside of the Shadow root which\n * allows it to be picked up inside of forms. It should contain the same\n * values as the host element.\n *\n * @param container The element where the input will be added\n * @param value The value of the input\n * @param name The name of the input\n * @param disabled If true, the input is disabled\n * @param always Add a hidden input even if the container does not use Shadow\n */\nconst renderHiddenInput = (container, value, name, disabled = false, always = true) => {\n    if (name && (always || hasShadowDom(container))) {\n        let input = getHiddenInputElement(container);\n        if (!input) {\n            input = container.ownerDocument.createElement(\"input\");\n            input.type = \"hidden\";\n            input.classList.add(icInput);\n            container.appendChild(input);\n        }\n        input.disabled = disabled;\n        input.name = name;\n        input.value = value instanceof Date ? value.toISOString() : value || \"\";\n    }\n};\nconst getHiddenInputElement = (container) => Array.from(container.querySelectorAll(`input.${icInput}`)).filter((el) => container === el.parentElement)[0];\n/**\n * This method is used to add a hidden file input to a host element that contains\n * a Shadow DOM. It does not add the input inside of the Shadow root which\n * allows it to be picked up inside of forms. It should contain the same\n * values as the host element.\n *\n * @param event: The event that is emitted once a file is selected.\n * @param container The element where the input will be added\n * @param multiple If true, multiple files can be selected\n * @param disabled If true, the input is disabled\n * @param accept A string of the accepted files\n * @param name The name of the input\n * @param value The value of the input\n */\nconst renderFileHiddenInput = (event, container, multiple, disabled, accept, name, value) => {\n    if (name !== undefined && hasShadowDom(container)) {\n        let input = getHiddenInputElement(container);\n        if (input === null || input === undefined) {\n            input = container.ownerDocument.createElement(\"input\");\n            input.classList.add(icInput);\n            container.appendChild(input);\n        }\n        input.type = \"file\";\n        input.hidden = true;\n        input.multiple = multiple;\n        input.name = name;\n        input.disabled = disabled;\n        if (value)\n            input.files = value;\n        if (accept)\n            input.accept = accept;\n        input.onchange = () => {\n            event.emit(input.files);\n        };\n        input.click();\n    }\n};\nconst removeHiddenInput = (container) => {\n    var _a;\n    (_a = getHiddenInputElement(container)) === null || _a === void 0 ? void 0 : _a.remove();\n};\nconst hasShadowDom = (el) => !!el && !!el.shadowRoot && !!el.attachShadow;\nconst getInputHelperTextID = (id) => id + \"-helper-text\";\nconst getInputValidationTextID = (id) => id + \"-validation-text\";\nconst getInputDescribedByText = (el, inputId, helperText, validationText) => `${isSlotUsed(el, \"helper-text\") || helperText\n    ? getInputHelperTextID(inputId)\n    : \"\"} ${validationText ? getInputValidationTextID(inputId) : \"\"}`.trim();\n/**\n * This method helps to understand the context in which a component exists,\n * to assist with choosing appropriate foreground colours to use. For example,\n * this method will help you use the 'white' version of a button if it's within\n * a block colour element using white foreground text.\n *\n * This only works for components/elements passed via <slot> and not if they\n * are part of an IC component.\n *\n * \"\"\n * @returns IcBrandForeground depending on the context\n */\nconst getBrandFromContext = (el, brandFromEvent = null) => {\n    var _a;\n    const parentElement = el.parentElement || el.getRootNode().host.parentElement;\n    const blockColorParent = parentElement === null || parentElement === void 0 ? void 0 : parentElement.closest(IC_BLOCK_COLOR_COMPONENTS);\n    if (!blockColorParent)\n        return IcBrandForegroundEnum.Default;\n    const parentTag = blockColorParent.tagName.toLowerCase();\n    if ((_a = IC_BLOCK_COLOR_EXCEPTIONS[parentTag]) === null || _a === void 0 ? void 0 : _a.includes(el.tagName.toLowerCase())) {\n        return IcBrandForegroundEnum.Default;\n    }\n    else if (brandFromEvent !== null &&\n        !IC_FIXED_COLOR_COMPONENTS.includes(parentTag)) {\n        return brandFromEvent;\n    }\n    else if (blockColorParent.classList.contains(`${parentTag}-${IcBrandForegroundEnum.Dark}`) ||\n        blockColorParent.classList.contains(IcBrandForegroundEnum.Dark)) {\n        return IcBrandForegroundEnum.Dark;\n    }\n    else {\n        return IcBrandForegroundEnum.Light;\n    }\n};\n/**\n * Checks if the current device is a mobile or tablet device.\n * @returns {boolean} Returns true if the device is a mobile or tablet device, otherwise returns false.\n */\nconst isMobileOrTablet = () => \"maxTouchPoints\" in navigator && \"userAgent\" in navigator\n    ? navigator.maxTouchPoints > 0 &&\n        /iPad|iPhone|iPod|Android|webOS|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)\n    : false;\n/**\n * Will create a button within the lightDOM which interacts with the form.\n * This is required as buttons within the shadowDOM will not invoke a submit or reset\n *\n * @param form - form element to associate button with\n * @param button - shadowDOM button\n */\nconst handleHiddenFormButtonClick = (form, button) => {\n    var _a, _b, _c, _d, _e, _f, _g;\n    const hiddenFormButtonId = button.type === \"submit\" || button.type === \"reset\"\n        ? `hidden-form-${button.type}-button`\n        : \"hidden-form-button\";\n    const hiddenFormButton = (_a = document.querySelector(`#${hiddenFormButtonId}`)) !== null && _a !== void 0 ? _a : document.createElement(\"button\");\n    hiddenFormButton.setAttribute(\"type\", (_b = button.type) !== null && _b !== void 0 ? _b : \"button\");\n    hiddenFormButton.id = hiddenFormButtonId;\n    hiddenFormButton.style.display = \"none\";\n    hiddenFormButton.formAction = (_c = button.formaction) !== null && _c !== void 0 ? _c : \"\";\n    hiddenFormButton.formEnctype = (_d = button.formenctype) !== null && _d !== void 0 ? _d : \"\";\n    hiddenFormButton.formMethod = (_e = button.formmethod) !== null && _e !== void 0 ? _e : \"\";\n    hiddenFormButton.formNoValidate = (_f = button.formnovalidate) !== null && _f !== void 0 ? _f : false;\n    hiddenFormButton.formTarget = (_g = button.formtarget) !== null && _g !== void 0 ? _g : \"\";\n    form === null || form === void 0 ? void 0 : form.appendChild(hiddenFormButton);\n    hiddenFormButton.click();\n};\nconst isEmptyString = (value) => !value || value.trim().length === 0;\n// A helper function that checks if a prop has been defined\nconst isPropDefined = (prop) => prop !== undefined ? prop : undefined;\n/**\n * Extracts the label using the value from an object. Requires the object to have a label and value property.\n * @param value - value from object\n * @param options - list of menu items\n * @returns - label corresponding to value\n */\nconst getLabelFromValue = (value, options, valueField = \"value\", labelField = \"label\") => {\n    const ungroupedOptions = [];\n    if (options.length > 0 && options.map) {\n        options.map((option) => {\n            if (option.children) {\n                option.children.map((option) => ungroupedOptions.push(option));\n            }\n            else {\n                ungroupedOptions.push(option);\n            }\n        });\n        const matchingValue = ungroupedOptions.find((option) => option[valueField] === value);\n        if (matchingValue !== undefined)\n            return matchingValue[labelField];\n    }\n    return undefined;\n};\n/**\n * Filters the options based on the search string.\n * @param options - array of options\n * @param includeDescriptions - determines whether option descriptions are included when filtering options\n * @param searchString - string used to filter the options\n * @param position - whether the search string matches the start of or anywhere in the options\n * @returns filtered array of options\n */\nconst getFilteredMenuOptions = (options, includeDescriptions, searchString, position = ANYWHERE_SEARCH_POSITION, labelField = \"label\") => options.filter((option) => {\n    var _a;\n    const label = option[labelField].toLowerCase();\n    const description = (_a = option.description) === null || _a === void 0 ? void 0 : _a.toLowerCase();\n    const lowerSearchString = searchString.toLowerCase();\n    return position === ANYWHERE_SEARCH_POSITION\n        ? includeDescriptions\n            ? label.includes(lowerSearchString) ||\n                (description === null || description === void 0 ? void 0 : description.includes(lowerSearchString))\n            : label.includes(lowerSearchString)\n        : includeDescriptions\n            ? label.startsWith(lowerSearchString) ||\n                (description === null || description === void 0 ? void 0 : description.startsWith(lowerSearchString))\n            : label.startsWith(lowerSearchString);\n});\n/**\n * Gets count of options where only group title \"parent\" options have been removed.\n * Disabled options are included in the count.\n * @param options - array of options\n * @returns number of options not including group titles\n */\nconst getOptionsWithoutGroupTitlesCount = (options) => {\n    const optionsWithoutGroupTitles = [];\n    if (options.length > 0 && options.map) {\n        options.map((option) => {\n            if (option.children) {\n                option.children.map((option) => optionsWithoutGroupTitles.push(option));\n            }\n            else {\n                optionsWithoutGroupTitles.push(option);\n            }\n        });\n    }\n    return optionsWithoutGroupTitles.length;\n};\nconst deviceSizeMatches = (size) => window.matchMedia(`(max-width: ${size}px)`).matches;\nconst getCurrentDeviceSize = () => {\n    if (deviceSizeMatches(DEVICE_SIZES.S)) {\n        return DEVICE_SIZES.S;\n    }\n    if (deviceSizeMatches(DEVICE_SIZES.M)) {\n        return DEVICE_SIZES.M;\n    }\n    if (deviceSizeMatches(DEVICE_SIZES.L)) {\n        return DEVICE_SIZES.L;\n    }\n    if (deviceSizeMatches(DEVICE_SIZES.XL)) {\n        return DEVICE_SIZES.XL;\n    }\n    //fallback needed as all of above get initialised to 0 in jest tests\n    return DEVICE_SIZES.UNDEFINED;\n};\nconst getCssProperty = (cssVar) => getComputedStyle(document.documentElement).getPropertyValue(cssVar);\n/**\n * Returns the brightness of the theme colour, calculated by using the theme RGB CSS values by:\n * - Multiplying each RGB value by a set number: https://www.w3.org/TR/AERT/#color-contrast\n * - Adding them together and dividing by 1000\n * This is a similar calculation to its CSS counterpart: \"--ic-brand-text-color\"\n * @returns number representing the brightness of the theme colour\n */\nconst getBrandColorBrightness = () => (parseInt(getCssProperty(\"--ic-brand-color-primary-r\")) * 299 +\n    parseInt(getCssProperty(\"--ic-brand-color-primary-g\")) * 587 +\n    parseInt(getCssProperty(\"--ic-brand-color-primary-b\")) * 114) /\n    1000;\n/**\n * Returns if dark or light foreground colors should be used for color contrast reasons\n * @returns \"dark\" or \"light\"\n * @param brightness - Optional custom brightness value. Defaults to `getBrandColorBrightness`\n */\nconst getBrandForegroundAppearance = (brightness = getBrandColorBrightness()) => brightness > DARK_MODE_THRESHOLD\n    ? IcBrandForegroundEnum.Dark\n    : IcBrandForegroundEnum.Light;\nconst getSlot = (element, name) => (element === null || element === void 0 ? void 0 : element.querySelector(`[slot=\"${name}\"]`)) || null;\nconst slotHasContent = (element, name) => getSlot(element, name) !== null;\nconst getSlotContent = (element, name) => {\n    const slot = getSlot(element, name);\n    return slot ? getSlotElements(slot) : null;\n};\nconst getSlotElements = (slot) => {\n    const slotContent = slot.firstElementChild;\n    if (slotContent === null)\n        return [slot];\n    const elements = slotContent.assignedElements\n        ? slotContent.assignedElements()\n        : slotContent.childNodes;\n    return elements.length ? elements : slot.tagName ? [slot] : null;\n};\nconst getNavItemParentDetails = ({ parentElement, }) => {\n    let navType = { navType: \"\", parent: null };\n    if (parentElement) {\n        switch (parentElement.tagName) {\n            case \"IC-NAVIGATION-GROUP\":\n                navType = getNavItemParentDetails(parentElement);\n                break;\n            case \"IC-TOP-NAVIGATION\":\n                navType = { navType: \"top\", parent: parentElement };\n                break;\n            case \"IC-SIDE-NAVIGATION\":\n                navType = { navType: \"side\", parent: parentElement };\n                break;\n            case \"IC-PAGE-HEADER\":\n                navType = { navType: \"page-header\", parent: null };\n                break;\n        }\n    }\n    return navType;\n};\nconst DEVICE_SIZES = {\n    XS: Number(getCssProperty(\"--ic-breakpoint-xs\").replace(\"px\", \"\")), // 0\n    S: Number(getCssProperty(\"--ic-breakpoint-sm\").replace(\"px\", \"\")), // 576\n    M: Number(getCssProperty(\"--ic-breakpoint-md\").replace(\"px\", \"\")), // 768\n    L: Number(getCssProperty(\"--ic-breakpoint-lg\").replace(\"px\", \"\")), // 992\n    XL: Number(getCssProperty(\"--ic-breakpoint-xl\").replace(\"px\", \"\")), // 1200\n    UNDEFINED: 1200,\n};\nconst hasValidationStatus = (status, disabled) => !!status && !disabled;\nconst isSlotUsed = ({ children }, slotName) => Array.from(children).some((child) => child.getAttribute(\"slot\") === slotName);\n// added as a common method to allow detection of gatsby hydration issue, where (camelCase) props are initially undefined & then update\n// with a value. Allows a callback function to be executed when this is the case\nconst onComponentPropUndefinedChange = (oldValue, newValue, callback) => {\n    if (oldValue === undefined && newValue !== oldValue) {\n        callback();\n    }\n};\nconst onComponentRequiredPropUndefined = (props, component) => {\n    props.forEach(({ prop, propName }) => {\n        if (prop === null || prop === undefined) {\n            console.error(`No ${propName} specified for ${component} component - prop '${propName}' (web components) / '${kebabToCamelCase(propName)}' (react) required`);\n        }\n    });\n};\nconst kebabToCamelCase = (kebabCase) => kebabCase\n    .toLowerCase()\n    .split(\"-\")\n    .map((word, index) => index === 0\n    ? word\n    : `${word.substring(0, 1).toUpperCase()}${word.substring(1)}`)\n    .join(\"\");\nconst checkResizeObserver = (callbackFn) => {\n    if (typeof window !== \"undefined\" &&\n        typeof window.ResizeObserver !== \"undefined\") {\n        callbackFn();\n    }\n};\nconst hex2dec = (v) => parseInt(v, 16);\nconst hexToRgba = (hex) => {\n    const hexChars = hex\n        .replace(\"#\", \"\")\n        .split(\"\")\n        .map((char) => char.repeat(2));\n    return {\n        r: hex2dec(hex.length === 4 ? hexChars[0] : hex.slice(1, 3)),\n        g: hex2dec(hex.length === 4 ? hexChars[1] : hex.slice(3, 5)),\n        b: hex2dec(hex.length === 4 ? hexChars[2] : hex.slice(5)),\n        a: 1,\n    };\n};\nconst rgbaStrToObj = (rgbaStr) => {\n    const isRGBA = rgbaStr.slice(3, 4).toLowerCase() === \"a\";\n    const rgbValues = rgbaStr\n        .substring(isRGBA ? 5 : 4, rgbaStr.length - 1)\n        .replace(/ /g, \"\")\n        .split(\",\")\n        .map(Number);\n    return {\n        r: rgbValues[0],\n        g: rgbValues[1],\n        b: rgbValues[2],\n        a: isRGBA ? rgbValues[3] : 1,\n    };\n};\nconst elementOverflowsX = ({ scrollWidth, clientWidth, }) => scrollWidth > clientWidth;\nconst hasClassificationBanner = () => !!document.querySelector(\"ic-classification-banner:not([inline='true'])\");\nconst addFormResetListener = (el, callbackFn) => {\n    var _a;\n    (_a = el.closest(\"FORM\")) === null || _a === void 0 ? void 0 : _a.addEventListener(\"reset\", callbackFn);\n};\nconst removeFormResetListener = (el, callbackFn) => {\n    var _a;\n    (_a = el.closest(\"FORM\")) === null || _a === void 0 ? void 0 : _a.removeEventListener(\"reset\", callbackFn);\n};\nconst pxToRem = (px, base = 16) => `${(1 / base) * parseInt(px)}rem`;\n/**\n * Removes the disabled attribute from the provided element when its value is set to false.\n * This effectively makes it null, to not confuse screen readers that cannot interpret the false value\n */\nconst removeDisabledFalse = (disabled, element) => {\n    if (!disabled) {\n        element.removeAttribute(\"disabled\");\n    }\n};\nconst isMacDevice = () => window.navigator.userAgent.toUpperCase().indexOf(\"MAC\") >= 0;\nconst convertToRGBA = (color) => {\n    const firstChar = color === null || color === void 0 ? void 0 : color.slice(0, 1).toLowerCase();\n    if (firstChar !== \"#\" && firstChar !== \"r\")\n        return null;\n    return firstChar === \"#\" ? hexToRgba(color) : rgbaStrToObj(color);\n};\nconst capitalize = (text) => text.charAt(0).toUpperCase() + text.slice(1);\nconst checkSlotInChildMutations = (addedNodes, removedNodes, slotName) => {\n    const hasSlot = (nodeList) => Array.from(nodeList).some((node) => Array.isArray(slotName)\n        ? slotName.some((name) => node.slot === name)\n        : node.slot === slotName);\n    return hasSlot(addedNodes) || hasSlot(removedNodes);\n};\nconst isElInAGGrid = (el) => !!el.closest(\".ag-cell\") && !!el.closest(\".ag-root\");\n/**\n * Checks if the component is slotted in its relevant 'group' component\n * @param component - the component to check\n */\nconst isSlottedInGroup = (component) => { var _a; return ((_a = component.parentElement) === null || _a === void 0 ? void 0 : _a.tagName) === `${component.tagName}-GROUP`; };\nconst hasDynamicChildSlots = (mutationList, slotNames) => mutationList.some(({ type, addedNodes, removedNodes }) => type === \"childList\" &&\n    checkSlotInChildMutations(addedNodes, removedNodes, slotNames));\nconst renderDynamicChildSlots = (mutationList, slotNames, ref) => {\n    if (hasDynamicChildSlots(mutationList, slotNames)) {\n        (0,_index_a7a720e7_js__WEBPACK_IMPORTED_MODULE_0__.f)(ref);\n    }\n};\nconst getElementInheritedTheme = (el) => {\n    var _a, _b, _c, _d, _e;\n    const blockParentTheme = (_b = (_a = el.parentElement) === null || _a === void 0 ? void 0 : _a.closest(IC_BLOCK_COLOR_COMPONENTS)) === null || _b === void 0 ? void 0 : _b.theme;\n    if (blockParentTheme && blockParentTheme !== \"inherit\")\n        return blockParentTheme;\n    const wrapperTheme = (_d = (_c = el.parentElement) === null || _c === void 0 ? void 0 : _c.closest(\"ic-theme\")) === null || _d === void 0 ? void 0 : _d.theme;\n    if (wrapperTheme && wrapperTheme !== \"system\")\n        return wrapperTheme;\n    return ((_e = window.matchMedia) === null || _e === void 0 ? void 0 : _e.call(window, \"(prefers-color-scheme: dark)\").matches)\n        ? \"dark\"\n        : \"light\";\n};\n\n\n\n//# sourceMappingURL=helpers-56631aa0.js.map\n\n//# sourceURL=webpack:///../../../../../../../../node_modules/@ukic/web-components/dist/esm/helpers-56631aa0.js?\n}");

/***/ })

}]);